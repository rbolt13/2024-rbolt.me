# Then, merge using 'TEAMNO' and 'YEAR'
combined_predictions <- merge(this_years_teams, public_picks, by = c("TEAMNO", "YEAR"))
# Assuming the merge worked and we have non-zero rows now, continue with the previous steps:
# Convert the pick percentages to numeric
public_picks_columns <- c("R64", "R32", "S16", "E8", "F4", "FINALS")
combined_predictions[public_picks_columns] <- lapply(combined_predictions[public_picks_columns], function(x) as.numeric(gsub("%", "", x)) / 100)
install.packages("partykit")
install.packages("ggparty")
library(partykit)
library(ggparty)
# First, convert your rpart object to a party object
party_model <- as.party(model)
# Now, use ggparty to plot
ggplot(party_model) +
geom_edge(aes(start_cap = ifelse(id == 1, "none", "circle"))) +
geom_edge_label(aes(label = splitvar)) +
geom_node_label(aes(label = paste0("Node ", id, "\n",
"n = ", nodesize, "\n",
"Win Percentage: ", round(prediction, 2))))
#### Load Packages ####
# tidyverse: A collection of data-related packages.
base::library(tidyverse)
#### Load Data ####
team_results <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-03-26/team-results.csv')
public_picks <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-03-26/public-picks.csv')
team_results <- team_results %>%
mutate(R64WIN = ifelse(R64 > 0, 1, 0),
R32WIN = ifelse(R32 > 0, 1, 0),
S16WIN = ifelse(S16 > 0, 1, 0),
E8WIN = ifelse(E8 > 0, 1, 0),
F4WIN = ifelse(F4 > 0, 1, 0),
F2WIN = ifelse(F2 > 0, 1, 0),
CHAMPWIN = ifelse(CHAMP > 0, 1, 0))
public_picks <- public_picks %>%
mutate_at(vars(R64:FINALS), ~readr::parse_number(.))
# Assuming both datasets can be directly compared; otherwise, adjust as necessary.
data_for_heatmap <- team_results %>%
inner_join(public_picks, by = "TEAM") %>%
mutate(DIFF_R64 = R64WIN * 100 - R64,
DIFF_R32 = R32WIN * 100 - R32,
DIFF_S16 = S16WIN * 100 - S16,
DIFF_E8 = E8WIN * 100 - E8,
DIFF_F4 = F4WIN * 100 - F4,
DIFF_FINALS = F2WIN * 100 - FINALS)
# Assuming both datasets can be directly compared; otherwise, adjust as necessary.
data_for_heatmap <- team_results %>%
inner_join(public_picks, by = "TEAM") %>%
mutate(# DIFF_R64 = R64WIN * 100 - R64,
DIFF_R32 = R32WIN * 100 - R32,
DIFF_S16 = S16WIN * 100 - S16,
DIFF_E8 = E8WIN * 100 - E8,
DIFF_F4 = F4WIN * 100 - F4,
DIFF_FINALS = F2WIN * 100 - FINALS)
public_picks
# Assuming both datasets can be directly compared; otherwise, adjust as necessary.
data_for_heatmap <- team_results %>%
inner_join(public_picks, by = "TEAM") %>%
mutate(DIFF_R64 = R64WIN * 100 - R64,
DIFF_R32 = R32WIN * 100 - R32,
DIFF_S16 = S16WIN * 100 - S16,
DIFF_E8 = E8WIN * 100 - E8,
DIFF_F4 = F4WIN * 100 - F4,
DIFF_FINALS = F2WIN * 100 - FINALS)
data_for_heatmap
# Assuming both datasets can be directly compared; otherwise, adjust as necessary.
data_for_heatmap <- team_results %>%
inner_join(public_picks, by = "TEAM")
data_for_heatmap
# Assuming both datasets can be directly compared; otherwise, adjust as necessary.
data_for_heatmap <- team_results %>%
inner_join(public_picks, by = "TEAM") %>%
mutate(DIFF_R64 = R64WIN * 100 - R64.y,
DIFF_R32 = R32WIN * 100 - R32.y,
DIFF_S16 = S16WIN * 100 - S16.y,
DIFF_E8 = E8WIN * 100 - E8.y,
DIFF_F4 = F4WIN * 100 - F4.y,
DIFF_FINALS = F2WIN * 100 - FINALS)
data_for_heatmap_long <- data_for_heatmap %>%
select(TEAM, DIFF_R64, DIFF_R32, DIFF_S16, DIFF_E8, DIFF_F4, DIFF_FINALS) %>%
pivot_longer(cols = starts_with("DIFF"), names_to = "ROUND", values_to = "DIFFERENCE") %>%
mutate(ROUND = sub("DIFF_", "", ROUND))
# Generate the heatmap
ggplot(data_for_heatmap, aes(x = ROUND, y = TEAM, fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Generate the heatmap
ggplot(data_for_heatmap_long, aes(x = ROUND, y = TEAM, fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(low = "blue", mid = "white", high = "red", midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(forcats) # for fct_relevel
# Assuming 'ROUND' is a factor with levels corresponding to the rounds
data_for_heatmap_long$ROUND <- fct_relevel(data_for_heatmap_long$ROUND,
"R64", "R32", "S16", "E8", "F4", "FINALS")
ggplot(data_for_heatmap_long, aes(x = ROUND, y = TEAM, fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(forcats) # for fct_relevel
# Assuming 'ROUND' is a factor with levels corresponding to the rounds
data_for_heatmap_long$ROUND <- fct_relevel(data_for_heatmap_long$ROUND,
"FINALS", "F4", "E8", "S16", "R32", "R64")
ggplot(data_for_heatmap_long, aes(x = ROUND, y = TEAM, fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Update round names for clarity
round_names <- c("R64" = "Round of 64", "R32" = "Round of 32", "S16" = "Sweet 16",
"E8" = "Elite 8", "F4" = "Final Four", "FINALS" = "Finals")
data_for_heatmap_long$ROUND <- factor(data_for_heatmap_long$ROUND,
levels = names(round_names),
labels = round_names)
# Sort teams by their success (assuming CHAMPWINS is a column with the count of championships won)
# This would require calculating CHAMPWINS if not already present in the data
data_for_heatmap_long <- data_for_heatmap_long %>%
arrange(desc(CHAMPWINS), TEAM)
data_for_heatmap_long
# Sort teams by their success (assuming CHAMPWINS is a column with the count of championships won)
# This would require calculating CHAMPWINS if not already present in the data
data_for_heatmap_long <- data_for_heatmap_long %>%
arrange(desc(DIFFERENCE), TEAM)
# Update round names for clarity
round_names <- c("R64" = "Round of 64", "R32" = "Round of 32", "S16" = "Sweet 16",
"E8" = "Elite 8", "F4" = "Final Four", "FINALS" = "Finals")
data_for_heatmap_long$ROUND <- factor(data_for_heatmap_long$ROUND,
levels = names(round_names),
labels = round_names)
# Sort teams by their success (assuming CHAMPWINS is a column with the count of championships won)
# This would require calculating CHAMPWINS if not already present in the data
data_for_heatmap_long <- data_for_heatmap_long %>%
arrange(desc(DIFFERENCE), TEAM)
# Use a colorblind-friendly palette and add text labels
heatmap <- ggplot(data_for_heatmap_long, aes(x = ROUND, y = fct_inorder(TEAM), fill = DIFFERENCE)) +
geom_tile(color = "white") +
geom_text(aes(label = round(DIFFERENCE, 1)), size = 2.5, vjust = 1.5) +
scale_fill_distiller(palette = "RdYlBu", direction = 1, name = "Difference") +
labs(title = "NCAA Teams Surpassing or Falling Short of Public Expectations",
subtitle = "Comparing public pick percentages against actual game outcomes.",
x = "Tournament Round",
y = "Team",
fill = "Difference (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +
guides(fill = guide_colourbar(barwidth = 10, barheight = .5))
# Print the heatmap
print(heatmap)
library(forcats) # for fct_relevel
# Assuming 'ROUND' is a factor with levels corresponding to the rounds
data_for_heatmap_long$ROUND <- fct_relevel(data_for_heatmap_long$ROUND,
"FINALS", "F4", "E8", "S16", "R32", "R64")
# Update round names for clarity
round_names <- c("R64" = "Round of 64", "R32" = "Round of 32", "S16" = "Sweet 16",
"E8" = "Elite 8", "F4" = "Final Four", "FINALS" = "Finals")
data_for_heatmap_long$ROUND <- factor(data_for_heatmap_long$ROUND,
levels = names(round_names),
labels = round_names)
# Ggplot
ggplot(data_for_heatmap_long, aes(x = ROUND, y = TEAM, fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Sort teams by their success (assuming CHAMPWINS is a column with the count of championships won)
# This would require calculating CHAMPWINS if not already present in the data
data_for_heatmap_long <- data_for_heatmap_long %>%
arrange(desc(DIFFERENCE), TEAM)
# Use a colorblind-friendly palette and add text labels
heatmap <- ggplot(data_for_heatmap_long, aes(x = ROUND, y = fct_inorder(TEAM), fill = DIFFERENCE)) +
geom_tile(color = "white") +
geom_text(aes(label = round(DIFFERENCE, 1)), size = 2.5, vjust = 1.5) +
scale_fill_distiller(palette = "RdYlBu", direction = 1, name = "Difference") +
labs(title = "NCAA Teams Surpassing or Falling Short of Public Expectations",
subtitle = "Comparing public pick percentages against actual game outcomes.",
x = "Tournament Round",
y = "Team",
fill = "Difference (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +
guides(fill = guide_colourbar(barwidth = 10, barheight = .5))
# Print the heatmap
print(heatmap)
# Use a colorblind-friendly palette and add text labels
heatmap <- ggplot(data_for_heatmap_long, aes(x = ROUND, y = fct_inorder(TEAM), fill = DIFFERENCE)) +
geom_tile(color = "white") +
geom_text(aes(label = round(DIFFERENCE, 1)), size = 2.5, vjust = 1.5) +
scale_fill_distiller(palette = "RdYlBu", direction = 1, name = "Difference") +
labs(title = "NCAA Teams Surpassing or Falling Short of Public Expectations",
subtitle = "Comparing public pick percentages against actual game outcomes.",
x = "Tournament Round",
y = "Team",
fill = "Difference (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom") +
guides(fill = guide_colourbar(barwidth = 10, barheight = .5))
# Print the heatmap
print(heatmap)
library(forcats) # for fct_relevel
# Assuming 'ROUND' is a factor with levels corresponding to the rounds
data_for_heatmap_long$ROUND <- fct_relevel(data_for_heatmap_long$ROUND,
"FINALS", "F4", "E8", "S16", "R32", "R64")
ggplot(data_for_heatmap_long, aes(x = ROUND, y = TEAM, fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_for_heatmap_long <- data_for_heatmap %>%
select(TEAM, DIFF_R64, DIFF_R32, DIFF_S16, DIFF_E8, DIFF_F4, DIFF_FINALS) %>%
pivot_longer(cols = starts_with("DIFF"), names_to = "ROUND", values_to = "DIFFERENCE") %>%
mutate(ROUND = sub("DIFF_", "", ROUND))
library(forcats) # for fct_relevel
# Assuming 'ROUND' is a factor with levels corresponding to the rounds
data_for_heatmap_long$ROUND <- fct_relevel(data_for_heatmap_long$ROUND,
"FINALS", "F4", "E8", "S16", "R32", "R64")
ggplot(data_for_heatmap_long, aes(x = ROUND, y = TEAM, fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Update round names for clarity
data_for_heatmap_long$ROUND <- c(
"R64" = "Round of 64",
"R32" = "Round of 32",
"S16" = "Sweet 16",
"E8" = "Elite 8",
"F4" = "Final Four",
"FINALS" = "Finals")
library(forcats) # for fct_relevel
# assign ROUNDS a factor level
data_for_heatmap_long$ROUND <- fct_relevel(
data_for_heatmap_long$ROUND,
"FINALS", "F4", "E8", "S16", "R32", "R64")
data_for_heatmap_long$ROUND <- factor(
data_for_heatmap_long$ROUND,
levels = c("R64", "R32", "S16",
"E8", "F4", "FINALS"),
labels = c("Round of 64", "Round of 32",
"Sweet 16", "Elite 8",
"Final Four", "Finals")
)
# Update round names for clarity
data_for_heatmap_long$ROUND <- c(
"R64" = "Round of 64",
"R32" = "Round of 32",
"S16" = "Sweet 16",
"E8" = "Elite 8",
"F4" = "Final Four",
"FINALS" = "Finals")
library(forcats) # for fct_relevel
# assign ROUNDS a factor level
data_for_heatmap_long$ROUND <- fct_relevel(
data_for_heatmap_long$ROUND,
"FINALS", "F4", "E8", "S16", "R32", "R64")
data_for_heatmap_long$ROUND <- factor(
data_for_heatmap_long$ROUND,
levels = c("R64", "R32", "S16",
"E8", "F4", "FINALS"),
labels = c("Round of 64", "Round of 32",
"Sweet 16", "Elite 8",
"Final Four", "Finals")
)
ggplot(data_for_heatmap_long, aes(x = ROUND, y = TEAM, fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data_for_heatmap_long <- data_for_heatmap %>%
select(TEAM, DIFF_R64, DIFF_R32, DIFF_S16, DIFF_E8, DIFF_F4, DIFF_FINALS) %>%
pivot_longer(cols = starts_with("DIFF"), names_to = "ROUND", values_to = "DIFFERENCE") %>%
mutate(ROUND = sub("DIFF_", "", ROUND))
# assign ROUNDS a factor level
data_for_heatmap_long$ROUND <- fct_relevel(
data_for_heatmap_long$ROUND,
"FINALS", "F4", "E8", "S16", "R32", "R64")
data_for_heatmap_long
data_for_heatmap_long$ROUND <- factor(
data_for_heatmap_long$ROUND,
levels = c("R64", "R32", "S16",
"E8", "F4", "FINALS"),
labels = c("Round of 64", "Round of 32",
"Sweet 16", "Elite 8",
"Final Four", "Finals")
)
data_for_heatmap_long
heatmap <- ggplot(
data_for_heatmap_long,
aes(x = ROUND, y = TEAM,
fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(
low = "blue", high = "red",
midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(heatmap)
public_picks
public_picks <- public_picks |>
filter(YEAR == "2024") |>
mutate_at(vars(R64:FINALS), ~readr::parse_number(.))
public_picks <- public_picks |>
filter(YEAR == "2023") |>
mutate_at(vars(R64:FINALS), ~readr::parse_number(.))
public_picks <- public_picks |>
filter(YEAR == "2022") |>
mutate_at(vars(R64:FINALS), ~readr::parse_number(.))
public_picks <- public_picks |>
filter(YEAR == 2024) |>
mutate_at(vars(R64:FINALS), ~readr::parse_number(.))
public_picks <- public_picks %>%
filter(YEAR == 2024) %>%
mutate(across(R64:FINALS, ~parse_number(as.character(.))))
public_picks <- public_picks |>
filter(YEAR == 2024) |>
mutate(across(R64:FINALS, ~parse_number(as.character(.))))
# Assuming both datasets can be directly compared; otherwise, adjust as necessary.
data_for_heatmap <- team_results %>%
inner_join(public_picks, by = "TEAM") %>%
mutate(DIFF_R64 = R64WIN * 100 - R64.y,
DIFF_R32 = R32WIN * 100 - R32.y,
DIFF_S16 = S16WIN * 100 - S16.y,
DIFF_E8 = E8WIN * 100 - E8.y,
DIFF_F4 = F4WIN * 100 - F4.y,
DIFF_FINALS = F2WIN * 100 - FINALS)
data_for_heatmap_long <- data_for_heatmap %>%
select(TEAM, DIFF_R64, DIFF_R32, DIFF_S16, DIFF_E8, DIFF_F4, DIFF_FINALS) %>%
pivot_longer(cols = starts_with("DIFF"), names_to = "ROUND", values_to = "DIFFERENCE") %>%
mutate(ROUND = sub("DIFF_", "", ROUND))
library(forcats) # for fct_relevel
# assign ROUNDS a factor level
data_for_heatmap_long$ROUND <- fct_relevel(
data_for_heatmap_long$ROUND,
"FINALS", "F4", "E8", "S16", "R32", "R64")
data_for_heatmap_long$ROUND <- factor(
data_for_heatmap_long$ROUND,
levels = c("R64", "R32", "S16",
"E8", "F4", "FINALS"),
labels = c("Round of 64", "Round of 32",
"Sweet 16", "Elite 8",
"Final Four", "Finals")
)
heatmap <- ggplot(
data_for_heatmap_long,
aes(x = ROUND, y = TEAM,
fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(
low = "blue", high = "red",
midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(heatmap)
ublic_picks
public_picks
public_picks <- public_picks |>
# filter(YEAR == 2024) |>
mutate(across(R64:FINALS, ~parse_number(as.character(.))))
# Assuming both datasets can be directly compared; otherwise, adjust as necessary.
data_for_heatmap <- team_results %>%
inner_join(public_picks, by = "TEAM") %>%
mutate(DIFF_R64 = R64WIN * 100 - R64.y,
DIFF_R32 = R32WIN * 100 - R32.y,
DIFF_S16 = S16WIN * 100 - S16.y,
DIFF_E8 = E8WIN * 100 - E8.y,
DIFF_F4 = F4WIN * 100 - F4.y,
DIFF_FINALS = F2WIN * 100 - FINALS)
data_for_heatmap_long <- data_for_heatmap %>%
select(TEAM, DIFF_R64, DIFF_R32, DIFF_S16, DIFF_E8, DIFF_F4, DIFF_FINALS) %>%
pivot_longer(cols = starts_with("DIFF"), names_to = "ROUND", values_to = "DIFFERENCE") %>%
mutate(ROUND = sub("DIFF_", "", ROUND))
library(forcats) # for fct_relevel
# assign ROUNDS a factor level
data_for_heatmap_long$ROUND <- fct_relevel(
data_for_heatmap_long$ROUND,
"FINALS", "F4", "E8", "S16", "R32", "R64")
data_for_heatmap_long$ROUND <- factor(
data_for_heatmap_long$ROUND,
levels = c("R64", "R32", "S16",
"E8", "F4", "FINALS"),
labels = c("Round of 64", "Round of 32",
"Sweet 16", "Elite 8",
"Final Four", "Finals")
)
heatmap <- ggplot(
data_for_heatmap_long,
aes(x = ROUND, y = TEAM,
fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(
low = "blue", high = "red",
midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(heatmap)
data_for_heatmap_long <- data_for_heatmap %>%
select(TEAM, DIFF_R64, DIFF_R32, DIFF_S16, DIFF_E8, DIFF_F4, DIFF_FINALS) %>%
pivot_longer(cols = starts_with("DIFF"), names_to = "ROUND", values_to = "DIFFERENCE") %>%
mutate(ROUND = sub("DIFF_", "", ROUND))
library(forcats) # for fct_relevel
data_for_heatmap_long$ROUND <- factor(
data_for_heatmap_long$ROUND,
levels = c("R64", "R32", "S16",
"E8", "F4", "FINALS"),
labels = c("Round of 64", "Round of 32",
"Sweet 16", "Elite 8",
"Final Four", "Finals")
)
# assign ROUNDS a factor level
data_for_heatmap_long$ROUND <- fct_relevel(
data_for_heatmap_long$ROUND,
"Finals", "Final Four",
"Elite 8", "Sweet 16",
"Round of 32", "Round of 64")
heatmap <- ggplot(
data_for_heatmap_long,
aes(x = ROUND, y = TEAM,
fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(
low = "blue", high = "red",
midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(heatmap)
library(dplyr)
library(tidyr)
library(ggplot2)
library(forcats)
# Create a column for Finals difference
data_for_heatmap <- data_for_heatmap %>%
mutate(FINALS_DIFFERENCE = DIFF_FINALS)
# Arrange by the Finals difference in descending order
data_for_heatmap <- data_for_heatmap %>%
arrange(desc(FINALS_DIFFERENCE))
# Now pivot the data longer
data_for_heatmap_long <- data_for_heatmap %>%
select(TEAM, DIFF_R64, DIFF_R32, DIFF_S16, DIFF_E8, DIFF_F4, DIFF_FINALS) %>%
pivot_longer(cols = starts_with("DIFF"), names_to = "ROUND", values_to = "DIFFERENCE") %>%
mutate(ROUND = sub("DIFF_", "", ROUND))
# Update the ROUND factor with correct levels and labels
data_for_heatmap_long$ROUND <- factor(
data_for_heatmap_long$ROUND,
levels = c("R64", "R32", "S16", "E8", "F4", "FINALS"),
labels = c("Round of 64", "Round of 32", "Sweet 16", "Elite 8", "Final Four", "Finals")
)
# Generate the heatmap
heatmap <- ggplot(
data_for_heatmap_long,
aes(x = ROUND, y = fct_inorder(TEAM), fill = DIFFERENCE)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", midpoint = 0) +
labs(title = "Team Performance vs. Public Expectation",
x = "Tournament Round",
y = "Team",
fill = "Difference") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(heatmap)
