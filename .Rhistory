import discogs_client
d = discogs_client.Client('rbolt13', user_token='IEdbUGdVBZgbdmSCWYYCSSUOlQDUTPGtuZHGtnAI')
user = d.user('rbolt13')
inventory = user.inventory
inventory.count
inventory.pages
inventory.per_page = 100
inventory.pages
first_page = inventory.page(0)
first_page[0]  # get the first listing on the page
first_listing.release
inventory = user.collection
inventory.count
inventory = user.inventory
inventory.count
user = d.user('rbolt13')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Process collection data
for release in collection:
print(release.title, release.artist, release.year)
d = discogs_client.Client('rbolt13', user_token='IEdbUGdVBZgbdmSCWYYCSSUOlQDUTPGtuZHGtnAI')
# Fetch collection data
collection = d.identity().collection_folders[0].releases
# Process collection data
for release in collection:
print(release.title, release.artist, release.year)
import discogs_client
# Authenticate with Discogs API
discogs = discogs_client.Client('rbolt13', user_token='IEdbUGdVBZgbdmSCWYYCSSUOlQDUTPGtuZHGtnAI')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Process collection data
for release in collection:
print(release.title, release.artist, release.year)
import discogs_client
# Authenticate with Discogs API
discogs = discogs_client.Client('MyDiscogsApp/1.0', user_token='IEdbUGdVBZgbdmSCWYYCSSUOlQDUTPGtuZHGtnAI')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Process collection data
for release in collection:
print(release.title, release.artist, release.year)
import discogs_client
# Authenticate with Discogs API
discogs = discogs_client.Client('rbolt13', user_token='IEdbUGdVBZgbdmSCWYYCSSUOlQDUTPGtuZHGtnAI')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Process collection data
for release in collection:
print(release.title, release.artist, release.year)
import discogs_client
# Authenticate with Discogs API
discogs = discogs_client.Client('rbolt13', user_token='IEdbUGdVBZgbdmSCWYYCSSUOlQDUTPGtuZHGtnAI')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Process collection data
for release in collection:
print(release.release.title, release.release.artists[0].name, release.release.year)
import csv
import discogs_client
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Define CSV file path
csv_file_path = 'collection.csv'
# Define CSV headers
csv_headers = ['Title', 'Artist', 'Year', 'Label', 'Genre']
# Open CSV file in write mode and write headers
with open(csv_file_path, 'w', newline='') as csvfile:
writer = csv.DictWriter(csvfile, fieldnames=csv_headers)
writer.writeheader()
# Process collection data and write to CSV
for release in collection:
title = release.release.title
artist = release.release.artists[0].name if release.release.artists else None
year = release.release.year
label = release.release.labels[0].name if release.release.labels else None
genre = release.release.genres[0] if release.release.genres else None
writer.writerow({'Title': title, 'Artist': artist, 'Year': year, 'Label': label, 'Genre': genre})
import csv
import discogs_client
# Authenticate with Discogs API
# discogs = discogs_client.Client('MyDiscogsApp/1.0', user_token='YOUR_USER_TOKEN')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Define CSV file path
csv_file_path = 'collection.csv'
# Define CSV headers
csv_headers = ['Title', 'Artist', 'Year', 'Label', 'Genre', 'Lowest Price', 'Median Price', 'Highest Price', 'Rating', 'Notes']
# Open CSV file in write mode and write headers
with open(csv_file_path, 'w', newline='') as csvfile:
writer = csv.DictWriter(csvfile, fieldnames=csv_headers)
writer.writeheader()
# Process collection data and write to CSV
for release in collection:
title = release.release.title
artist = release.release.artists[0].name if release.release.artists else None
import csv
import discogs_client
# Authenticate with Discogs API
# discogs = discogs_client.Client('MyDiscogsApp/1.0', user_token='YOUR_USER_TOKEN')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Define CSV file path
csv_file_path = 'collection.csv'
# Define CSV headers
csv_headers = ['Title', 'Artist', 'Year', 'Label', 'Genre', 'Lowest Price', 'Median Price', 'Highest Price', 'Rating', 'Notes']
# Open CSV file in write mode and write headers
with open(csv_file_path, 'w', newline='', encoding='utf-8') as csvfile:
writer = csv.DictWriter(csvfile, fieldnames=csv_headers)
writer.writeheader()
# Process collection data and write to CSV
for release in collection:
title = release.release.title
artist = release.release.artists[0].name if release.release.artists else None
year = release.release.year
label = release.release.labels[0].name if release.release.labels else None
genre = release.release.genres[0] if release.release.genres else None
lowest_price = release.release.lowest_price.amount if release.release.lowest_price else None
median_price = release.release.median_price.amount if release.release.median_price else None
highest_price = release.release.highest_price.amount if release.release.highest_price else None
rating = release.release.community.rating.average if release.release.community else None
notes = release.notes
writer.writerow({
'Title': title, 'Artist': artist, 'Year': year, 'Label': label, 'Genre': genre,
'Lowest Price': lowest_price, 'Median Price': median_price, 'Highest Price': highest_price,
'Rating': rating, 'Notes': notes
})
import csv
import discogs_client
# Authenticate with Discogs API
# discogs = discogs_client.Client('MyDiscogsApp/1.0', user_token='YOUR_USER_TOKEN')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Define CSV file path
csv_file_path = 'collection.csv'
# Define CSV headers
csv_headers = ['Title', 'Artist', 'Year', 'Label', 'Genre', 'Lowest Price', 'Median Price', 'Highest Price', 'Rating', 'Notes']
# Open CSV file in write mode and write headers
with open(csv_file_path, 'w', newline='', encoding='utf-8') as csvfile:
writer = csv.DictWriter(csvfile, fieldnames=csv_headers)
writer.writeheader()
# Process collection data and write to CSV
for release in collection:
title = release.release.title
artist = release.release.artists[0].name if release.release.artists else None
year = release.release.year
label = release.release.labels[0].name if release.release.labels else None
genre = release.release.genres[0] if release.release.genres else None
lowest_price = None
median_price = None
highest_price = None
rating = None
# Get lowest, median, and highest prices if available
if release.release.price:
lowest_price = release.release.price.get('value', {}).get('low')
median_price = release.release.price.get('value', {}).get('median')
highest_price = release.release.price.get('value', {}).get('high')
# Get rating if available
if release.release.community:
rating = release.release.community.rating.average
notes = release.notes
writer.writerow({
'Title': title, 'Artist': artist, 'Year': year, 'Label': label, 'Genre': genre,
'Lowest Price': lowest_price, 'Median Price': median_price, 'Highest Price': highest_price,
'Rating': rating, 'Notes': notes
})
collection = discogs.identity().collection_folders[0].releases
# Print out attributes to debug
for release in collection:
print(release.release.title)
print(release.release.artists[0].name if release.release.artists else None)
print(release.release.year)
print(release.release.labels[0].name if release.release.labels else None)
print(release.release.genres[0] if release.release.genres else None)
print(release.release.price)
print(release.release.community.rating.average if release.release.community else None)
print(release.notes)
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Define CSV file path
csv_file_path = 'collection.csv'
# Define CSV headers
csv_headers = ['Title', 'Artist', 'Year', 'Label', 'Genre', 'Lowest Price', 'Median Price', 'Highest Price', 'Rating', 'Notes']
# Open CSV file in write mode and write headers
with open(csv_file_path, 'w', newline='', encoding='utf-8') as csvfile:
writer = csv.DictWriter(csvfile, fieldnames=csv_headers)
writer.writeheader()
# Process collection data and write to CSV
for release in collection:
title = release.release.title
artist = release.release.artists[0].name if release.release.artists else None
year = release.release.year
label = release.release.labels[0].name if release.release.labels else None
genre = release.release.genres[0] if release.release.genres else None
# Get price information
lowest_price = None
median_price = None
highest_price = None
if release.instance.price:
lowest_price = release.instance.price['value'].get('low')
median_price = release.instance.price['value'].get('median')
highest_price = release.instance.price['value'].get('high')
# Get rating if available
rating = release.release.community.rating.average if release.release.community else None
# Get notes if available
notes = release.notes
writer.writerow({
'Title': title, 'Artist': artist, 'Year': year, 'Label': label, 'Genre': genre,
'Lowest Price': lowest_price, 'Median Price': median_price, 'Highest Price': highest_price,
'Rating': rating, 'Notes': notes
})
import discogs_client
from tabulate import tabulate
# Authenticate with Discogs API
# discogs = discogs_client.Client('MyDiscogsApp/1.0', user_token='YOUR_USER_TOKEN')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Prepare data for tabulate
data = []
for release in collection:
title = release.release.title
artist = release.release.artists[0].name if release.release.artists else "Unknown"
year = release.release.year
label = release.release.labels[0].name if release.release.labels else "Unknown"
genre = release.release.genres[0] if release.release.genres else "Unknown"
# Check if price information is available
lowest_price = release.instance.price['value'].get('low') if release.instance.price else "N/A"
median_price = release.instance.price['value'].get('median') if release.instance.price else "N/A"
highest_price = release.instance.price['value'].get('high') if release.instance.price else "N/A"
# Check if rating information is available
rating = release.release.community.rating.average if release.release.community else "N/A"
notes = release.notes
data.append([title, artist, year, label, genre, lowest_price, median_price, highest_price, rating, notes])
# Print data in table format
headers = ["Title", "Artist", "Year", "Label", "Genre", "Lowest Price", "Median Price", "Highest Price", "Rating", "Notes"]
print(tabulate(data, headers=headers))
import discogs_client
# Authenticate with Discogs API
# discogs = discogs_client.Client('MyDiscogsApp/1.0', user_token='YOUR_USER_TOKEN')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Print out all available data for each release
for release in collection:
print("Title:", release.release.title)
print("Artist:", release.release.artists[0].name if release.release.artists else "Unknown")
print("Year:", release.release.year)
print("Label:", release.release.labels[0].name if release.release.labels else "Unknown")
print("Genre:", release.release.genres[0] if release.release.genres else "Unknown")
# Check if price information is available
if release.instance.price:
print("Lowest Price:", release.instance.price['value'].get('low'))
print("Median Price:", release.instance.price['value'].get('median'))
print("Highest Price:", release.instance.price['value'].get('high'))
else:
print("Price: Not available")
# Check if rating information is available
if release.release.community:
print("Rating:", release.release.community.rating.average)
else:
print("Rating: Not available")
print("Notes:", release.notes)
print()
import csv
import discogs_client
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Define CSV file path
csv_file_path = 'collection.csv'
# Define CSV headers
csv_headers = ['Title', 'Artist', 'Year', 'Label', 'Genre']
# Open CSV file in write mode and write headers
with open(csv_file_path, 'w', newline='') as csvfile:
writer = csv.DictWriter(csvfile, fieldnames=csv_headers)
writer.writeheader()
# Process collection data and write to CSV
for release in collection:
title = release.release.title
artist = release.release.artists[0].name if release.release.artists else None
year = release.release.year
label = release.release.labels[0].name if release.release.labels else None
genre = release.release.genres[0] if release.release.genres else None
writer.writerow({'Title': title, 'Artist': artist, 'Year': year, 'Label': label, 'Genre': genre})
?identity()
collection = discogs.identity().collection_folders[0]
collection
for release in collection:
print(release.release.title, release.release.artists[0].name, release.release.year)
].releases
].releases
for release in collection:
print(release.release.title, release.release.artists[0].name, release.release.year)
import discogs_client
# Authenticate with Discogs API
discogs = discogs_client.Client('rbolt13', user_token='IEdbUGdVBZgbdmSCWYYCSSUOlQDUTPGtuZHGtnAI')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Process collection data
for release in collection:
print(release.release.title, release.release.artists[0].name, release.release.year)
import discogs_client
# Authenticate with Discogs API
discogs = discogs_client.Client('rbolt13', user_token='IEdbUGdVBZgbdmSCWYYCSSUOlQDUTPGtuZHGtnAI')
# Fetch collection data
collection = discogs.identity().collection_folders[0]
# Process collection data
for release in collection:
print(release.release.title, release.release.artists[0].name, release.release.year)
import discogs_client
# Authenticate with Discogs API
discogs = discogs_client.Client('rbolt13', user_token='IEdbUGdVBZgbdmSCWYYCSSUOlQDUTPGtuZHGtnAI')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Process collection data
for release in collection:
print(release.release.title, release.release.artists[0].name, release.release.year, release.release.rating)
import discogs_client
# Authenticate with Discogs API
discogs = discogs_client.Client('rbolt13', user_token='IEdbUGdVBZgbdmSCWYYCSSUOlQDUTPGtuZHGtnAI')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Process collection data
for release in collection:
print(release.release.title, release.release.artists[0].name, release.release.year, release.release.genre)
import discogs_client
# Authenticate with Discogs API
discogs = discogs_client.Client('rbolt13', user_token='IEdbUGdVBZgbdmSCWYYCSSUOlQDUTPGtuZHGtnAI')
# Fetch collection data
collection = discogs.identity().collection_folders[0].releases
# Process collection data
for release in collection:
print(release.release.title, release.release.artists[0].name, release.release.year)
library(readr)
library(dplyr)
# Load Data
cereals <- readr::read_csv("../../../../data/cereal.csv")
library(janitor)
# Load Data
cereals <- readr::read_csv("../../../../data/cereal.csv", ) |>
janitor::clean_names() |>
dplyr::mutate(shelf = factor(shelf, ordered = TRUE)) |>
dplyr::mutate(c("manufacturer", "type"), as.factor)
# Load Packages
library(skimr)
library(readr)
library(dplyr)
library(janitor)
# Load Data
cereals <- readr::read_csv("../../../../data/cereal.csv", ) |>
janitor::clean_names() |>
mutate(shelf = factor(shelf, ordered=TRUE)) |>
mutate(across(c("manufacturer", "type"), as.factor))
# Load Packages
library(skimr)
library(readr)
library(dplyr)
library(janitor)
# Load Data
cereals <- readr::read_csv("../../../../data/cereal.csv", ) |>
janitor::clean_names() |>
dplyr::mutate(shelf = factor(shelf, ordered = TRUE)) |>
dplyr::mutate(c("manufacturer", "type"), as.factor))
# Load Packages
library(skimr)
library(readr)
library(dplyr)
library(janitor)
# Load Data
cereals <- readr::read_csv("../../../../data/cereal.csv", ) |>
janitor::clean_names() |>
dplyr::mutate(shelf = factor(shelf, ordered = TRUE)) |>
dplyr::mutate(c("manufacturer", "type"), as.factor)
# Load Data
cereals <- readr::read_csv("../../../../data/cereal.csv") |>
janitor::clean_names() |>
dplyr::mutate(shelf = factor(shelf, ordered = TRUE)) |>
dplyr::mutate(across(c("manufacturer", "type"), as.factor))
# Load Data
cereals <- readr::read_csv("../../../../data/cereal.csv") |>
janitor::clean_names() |>
dplyr::mutate(shelf = factor(shelf, ordered = TRUE)) |>
dplyr::mutate(across(c("manufacturer", "type"), as.factor))
cereals
# Load Packages
library(skimr)
library(readr)
library(dplyr)
library(janitor)
# Load Data
cereals <- readr::read_csv("../../../../data/cereal.csv") |>
janitor::clean_names() |>
dplyr::mutate(shelf = factor(shelf, ordered = TRUE)) |>
dplyr::mutate(across(c("mfc", "type"), as.factor))
cereals
# Load Data
cereals <- readr::read_csv("../../../../data/cereal.csv") |>
janitor::clean_names() |>
dplyr::mutate(shelf = factor(shelf, ordered = TRUE)) |>
dplyr::mutate(across(c("mfr", "type"), as.factor))
?clean_names()
summary(cereals)
skim_output <- skimr::skim(cereals)
summary(skim_output)
skimr::yank(skim_output, "character")
?yank()
skimr::yank(skim_output, "factor")
cearals <- cearals |>
mutate(manufacturer = forcats::fct_recode(
manufacturer, !!!manu_labels))
manu_labels <- c("American Home"="A",
"General Mills"="G",
"Kelloggs"="K",
"Nabisco" = "N",
"Post" = "P",
"Quaker Oats" = "Q",
"Ralston Purina" = "R")
cearals <- cearals |>
mutate(manufacturer = forcats::fct_recode(
manufacturer, !!!manu_labels))
#| output: false
# Load Data
cereals <- readr::read_csv("../../../../data/cereal.csv") |>
# clean names by converting to lowercase, replace spaces
# with underscore and removes special characters
janitor::clean_names() |>
# make shelf an ordered factor
dplyr::mutate(shelf = factor(shelf, ordered = TRUE)) |>
# convert mfr and type columns to categorical data
dplyr::mutate(across(c("mfr", "type"), as.factor))
manu_labels <- c("American Home"="A",
"General Mills"="G",
"Kelloggs"="K",
"Nabisco" = "N",
"Post" = "P",
"Quaker Oats" = "Q",
"Ralston Purina" = "R")
cereals <- cereals |>
mutate(manufacturer = forcats::fct_recode(
manufacturer, !!!manu_labels))
manu_labels <- c("American Home"="A",
"General Mills"="G",
"Kelloggs"="K",
"Nabisco" = "N",
"Post" = "P",
"Quaker Oats" = "Q",
"Ralston Purina" = "R")
cereals <- cereals |>
mutate(mfr = forcats::fct_recode(mfr, !!!manu_labels))
cereals
cereals |>
janitor::tabyl(shelf)
?mutate()
#| output: false
manu_labels <- c("American Home"="A",
"General Mills"="G",
"Kelloggs"="K",
"Nabisco" = "N",
"Post" = "P",
"Quaker Oats" = "Q",
"Ralston Purina" = "R")
cereals <- cereals |>
dplyr::mutate(mfr = forcats::fct_recode(mfr, !!!manu_labels))
