grant_data_fake <- dplyr::bind_rows(grant_data, fake_data)
# Set Seed to reproduced randomness
base::set.seed(123)
# Iterate through grantee_data
for (i in 1:nrow(grantee_data)) {
# Generate dates based on reporting frequency
submission_dates <- generate_submission_dates(
grantee_data$StartDate[i],
grantee_data$ReportingFrequency[i],
grantee_data$NumClaims[i])
# Repeat columns for each date
fake_data <- data.frame(
GranteeName = base::rep(
grantee_data$GranteeName[i],
base::length(submission_dates)
),
LeadContact = base::rep(
base::paste("Contact", i),
base::length(submission_dates)
),
GranteeType = base::rep(
grantee_data$GranteeType[i],
base::length(submission_dates)
),
DateOfSubmission = submission_dates,
SubmissionCycle = base::rep(
grantee_data$ReportingFrequency[i],
base::length(submission_dates)
),
TotalAmountOfClaim = base::rep(
sample(seq(
from = 0.5 * grantee_data$AvgClaim[i],
to = grantee_data$AvgClaim[i],
by = 1000),
size = 1),
base::length(submission_dates)
),
StatusOfClaim = generate_random_status(length(submission_dates)),
IssuesOrQuestions = generate_random_issues(length(submission_dates)),
ContactInformation = base::rep(
base::paste("Email:",
base::paste(sample(0:9, 10, replace = TRUE), collapse = ""),
"@example.com"),
base::length(submission_dates)
)
)
# Append fake_data to grant_data_fake
grant_data_fake <- dplyr::bind_rows(grant_data, fake_data)
# Set seed to reproduce randomness
set.seed(123)
# Initialize an empty data frame to hold the fake data
grants_fake <- data.frame()
# Iterate through grantee_data
for (i in 1:nrow(grantee_data)) {
# Generate dates based on reporting frequency
submission_dates <- submission_dates(
grantee_data$StartDate[i],
grantee_data$ReportingFrequency[i],
grantee_data$NumClaims[i])
# Repeat columns for each date
fake_data <- data.frame(
GranteeName = rep(grantee_data$GranteeName[i], length(submission_dates)),
LeadContact = rep(paste("Contact", i), length(submission_dates)),
GranteeType = rep(grantee_data$GranteeType[i], length(submission_dates)),
DateOfSubmission = submission_dates,
SubmissionCycle = rep(grantee_data$ReportingFrequency[i], length(submission_dates)),
TotalAmountOfClaim = rep(sample(seq(from = 0.5 * grantee_data$AvgClaim[i], to = grantee_data$AvgClaim[i], by = 1000), size = 1), length(submission_dates)),
StatusOfClaim = random_status(length(submission_dates)),
IssuesOrQuestions = random_issues(length(submission_dates)),
ContactInformation = rep(paste("Email:", paste(sample(0:9, 10, replace = TRUE), collapse = ""), "@example.com"), length(submission_dates))
)
# Append fake_data to grants_fake
grants_fake <- dplyr::bind_rows(grants_fake, fake_data)
grants <- grants_fake |>
dplyr::mutate(
SubmissionCycle = base::as.factor(SubmissionCycle),
StatusOfClaim = base::as.factor(StatusOfClaim),
IssuesOrQuestions = base::as.factor(IssuesOrQuestions)
)
# Set seed to reproduce randomness
set.seed(123)
# Initialize an empty data frame to hold the fake data
grants_fake <- data.frame()
# Function to generate submission dates
generate_submission_dates <- function(start_date, freq, num_claims) {
if (freq == "Weekly") {
return(seq(from = start_date, by = "7 days", length.out = num_claims))
base::library(dplyr)
base::library(lubridate)
base::library(skimr)
base::library(reactable)
total_budget <- 30000000
grants <- data.frame(
GranteeName = character(),
LeadContact = character(),
GranteeType = character(),
DateOfSubmission = character(),
SubmissionCycle = character(),
TotalAmountOfClaim = numeric(),
StatusOfClaim = character(),
IssuesOrQuestions = character(),
ContactInformation = character()
)
grants <- grants |>
dplyr::mutate(
DateOfSubmission = base::as.Date(DateOfSubmission),
SubmissionCycle = base::factor(
SubmissionCycle,
levels = c("Annual", "Semi-Annual", "Quarterly")),
StatusOfClaim = base::factor(
StatusOfClaim,
levels = c("Pending", "Approved", "Rejected"))
)
grantees <- base::data.frame(
GranteeName = paste("Grantee", 1:10),
GranteeType = c(
"District", "ESD", "Consortium",
"District", "ESD", "Consortium",
"District", "ESD", "Consortium",
"District"),
ReportingFrequency = c(
"Monthly", "Weekly", "Quarterly",
"Monthly", "Weekly", "Quarterly",
"Monthly", "Weekly", "Quarterly",
"Monthly"),
StartDate = base::as.Date(c(
"2024-01-01", "2024-01-07", "2024-03-01",
"2024-01-01", "2024-01-07", "2024-03-01",
"2024-01-01", "2024-01-07", "2024-03-01",
"2024-01-01")),
NumClaims = c(
12, 52, 4,
12, 52, 4,
12, 52, 4,
12)
)
rand_norm_perc <- function(n) {
base::set.seed(123)
rand_perc <- stats::runif(n, min = 0, max = 100)
norm_perc <- rand_perc / base::sum(rand_perc)
return(norm_perc)
}
rand_percents <- rand_norm_perc(base::nrow(grantees))
grantees$MaxClaim <- base::round(rand_percents * total_budget, digits = 2)
grantees$AvgClaim <- grantees$MaxClaim / grantees$NumClaims
submission_dates <- function(
start_date,
freq,
num_claims
) {
if (freq == "Weekly") {
return(base::seq(
from = start_date,
by = "7 days",
length.out = num_claims)
)
} else if (freq == "Monthly") {
return(base::seq(
from = start_date,
by = "1 month",
length.out = num_claims)
)
} else if (freq == "Quarterly") {
return(base::seq(
from = start_date,
by = "3 months",
length.out = num_claims)
)
}
}
submission_dates(Sys. Date( ), "Quarterly", 4)
submission_dates(Sys.Date( ), "Quarterly", 4)
random_status <- function(n) {
statuses <- c("Approved", "Pending Review", "Needs Revision")
return(sample(statuses, n, replace = TRUE))
}
random_status <- function(n) {
statuses <- c("Approved", "Pending Review", "Needs Revision")
return(sample(statuses, n, replace = TRUE))
}
random_issues <- function(n) {
issues <- c("No issues", "Minor discrepancies", "Major discrepancies")
return(sample(issues, n, replace = TRUE))
}
random_status(4)
random_issues(4)
random_status(10)
random_issues(10)
# Set Seed to reproduced randomness
base::set.seed(123)
# Iterate through grantee_data
for (i in 1:nrow(grantee_data)) {
# Generate dates based on reporting frequency
submission_dates <- submission_dates(
grantee_data$StartDate[i],
grantee_data$ReportingFrequency[i],
grantee_data$NumClaims[i])
# Repeat columns for each date
fake_data <- data.frame(
GranteeName = base::rep(
grantee_data$GranteeName[i],
base::length(submission_dates)
),
LeadContact = base::rep(
base::paste("Contact", i),
base::length(submission_dates)
),
GranteeType = base::rep(
grantee_data$GranteeType[i],
base::length(submission_dates)
),
DateOfSubmission = submission_dates,
SubmissionCycle = base::rep(
grantee_data$ReportingFrequency[i],
base::length(submission_dates)
),
TotalAmountOfClaim = base::rep(
sample(seq(
from = 0.5 * grantee_data$AvgClaim[i],
to = grantee_data$AvgClaim[i],
by = 1000),
size = 1),
base::length(submission_dates)
),
StatusOfClaim = random_status(length(submission_dates)),
IssuesOrQuestions = random_issues(length(submission_dates)),
ContactInformation = base::rep(
base::paste("Email:",
base::paste(sample(0:9, 10, replace = TRUE), collapse = ""),
"@example.com"),
base::length(submission_dates)
)
)
# Append fake_data to grant_data_fake
grant_data_fake <- dplyr::bind_rows(grants, fake_data)
}
# Set Seed to reproduced randomness
base::set.seed(123)
# Iterate through grantee_data
for (i in 1:nrow(grantees)) {
# Generate dates based on reporting frequency
submission_dates <- submission_dates(
grantee_data$StartDate[i],
grantee_data$ReportingFrequency[i],
grantee_data$NumClaims[i])
# Repeat columns for each date
fake_data <- data.frame(
GranteeName = base::rep(
grantee_data$GranteeName[i],
base::length(submission_dates)
),
LeadContact = base::rep(
base::paste("Contact", i),
base::length(submission_dates)
),
GranteeType = base::rep(
grantee_data$GranteeType[i],
base::length(submission_dates)
),
DateOfSubmission = submission_dates,
SubmissionCycle = base::rep(
grantee_data$ReportingFrequency[i],
base::length(submission_dates)
),
TotalAmountOfClaim = base::rep(
sample(seq(
from = 0.5 * grantee_data$AvgClaim[i],
to = grantee_data$AvgClaim[i],
by = 1000),
size = 1),
base::length(submission_dates)
),
StatusOfClaim = random_status(length(submission_dates)),
IssuesOrQuestions = random_issues(length(submission_dates)),
ContactInformation = base::rep(
base::paste("Email:",
base::paste(sample(0:9, 10, replace = TRUE), collapse = ""),
"@example.com"),
base::length(submission_dates)
)
)
# Append fake_data to grant_data_fake
grant_data_fake <- dplyr::bind_rows(grants, fake_data)
}
# Set Seed to reproduced randomness
base::set.seed(123)
# Iterate through grantee_data
for (i in 1:nrow(grantees)) {
# Generate dates based on reporting frequency
submission_dates <- submission_dates(
grantees$StartDate[i],
grantees$ReportingFrequency[i],
grantees$NumClaims[i])
# Repeat columns for each date
fake_data <- data.frame(
GranteeName = base::rep(
grantees$GranteeName[i],
base::length(submission_dates)
),
LeadContact = base::rep(
base::paste("Contact", i),
base::length(submission_dates)
),
GranteeType = base::rep(
grantees$GranteeType[i],
base::length(submission_dates)
),
DateOfSubmission = submission_dates,
SubmissionCycle = base::rep(
grantees$ReportingFrequency[i],
base::length(submission_dates)
),
TotalAmountOfClaim = base::rep(
sample(seq(
from = 0.5 * grantees$AvgClaim[i],
to = grantees$AvgClaim[i],
by = 1000),
size = 1),
base::length(submission_dates)
),
StatusOfClaim = random_status(length(submission_dates)),
IssuesOrQuestions = random_issues(length(submission_dates)),
ContactInformation = base::rep(
base::paste("Email:",
base::paste(sample(0:9, 10, replace = TRUE), collapse = ""),
"@example.com"),
base::length(submission_dates)
)
)
# Append fake_data to grant_data_fake
grant_data_fake <- dplyr::bind_rows(grants, fake_data)
}
# Set Seed to reproduced randomness
base::set.seed(123)
# Iterate through grantee_data
for (i in 1:nrow(grantees)) {
# Generate dates based on reporting frequency
submission_dates <- submission_dates(
grantees$StartDate[i],
grantees$ReportingFrequency[i],
grantees$NumClaims[i])
# Append fake_data to grant_data_fake
#grant_data_fake <- dplyr::bind_rows(grants, fake_data)
}
submission_dates <- function(
start_date,
freq,
num_claims
) {
if (freq == "Weekly") {
return(base::seq(
from = start_date,
by = "7 days",
length.out = num_claims)
)
} else if (freq == "Monthly") {
return(base::seq(
from = start_date,
by = "1 month",
length.out = num_claims)
)
} else if (freq == "Quarterly") {
return(base::seq(
from = start_date,
by = "3 months",
length.out = num_claims)
)
}
}
# Set Seed to reproduced randomness
base::set.seed(123)
# Iterate through grantee_data
for (i in 1:nrow(grantees)) {
# Generate dates based on reporting frequency
submission_dates <- submission_dates(
grantees$StartDate[i],
grantees$ReportingFrequency[i],
grantees$NumClaims[i])
# Append fake_data to grant_data_fake
#grant_data_fake <- dplyr::bind_rows(grants, fake_data)
}
# Repeat columns for each date
fake_data <- data.frame(
GranteeName = base::rep(
grantees$GranteeName[i],
base::length(submission_dates)
),
LeadContact = base::rep(
base::paste("Contact", i),
base::length(submission_dates)
),
GranteeType = base::rep(
grantees$GranteeType[i],
base::length(submission_dates)
),
DateOfSubmission = submission_dates,
SubmissionCycle = base::rep(
grantees$ReportingFrequency[i],
base::length(submission_dates)
),
TotalAmountOfClaim = base::rep(
sample(seq(
from = 0.5 * grantees$AvgClaim[i],
to = grantees$AvgClaim[i],
by = 1000),
size = 1),
base::length(submission_dates)
),
StatusOfClaim = random_status(length(submission_dates)),
IssuesOrQuestions = random_issues(length(submission_dates)),
ContactInformation = base::rep(
base::paste("Email:",
base::paste(sample(0:9, 10, replace = TRUE), collapse = ""),
"@example.com"),
base::length(submission_dates)
)
)
fake_data
base::library(dplyr)
base::library(lubridate)
base::library(skimr)
base::library(reactable)
total_budget <- 30000000
grants <- data.frame(
GranteeName = character(),
LeadContact = character(),
GranteeType = character(),
DateOfSubmission = character(),
SubmissionCycle = character(),
TotalAmountOfClaim = numeric(),
StatusOfClaim = character(),
IssuesOrQuestions = character(),
ContactInformation = character()
)
grants <- grants |>
dplyr::mutate(
DateOfSubmission = base::as.Date(DateOfSubmission),
SubmissionCycle = base::factor(
SubmissionCycle,
levels = c("Annual", "Semi-Annual", "Quarterly")),
StatusOfClaim = base::factor(
StatusOfClaim,
levels = c("Pending", "Approved", "Rejected"))
)
grantees <- base::data.frame(
GranteeName = paste("Grantee", 1:10),
GranteeType = c(
"District", "ESD", "Consortium",
"District", "ESD", "Consortium",
"District", "ESD", "Consortium",
"District"),
ReportingFrequency = c(
"Monthly", "Weekly", "Quarterly",
"Monthly", "Weekly", "Quarterly",
"Monthly", "Weekly", "Quarterly",
"Monthly"),
StartDate = base::as.Date(c(
"2024-01-01", "2024-01-07", "2024-03-01",
"2024-01-01", "2024-01-07", "2024-03-01",
"2024-01-01", "2024-01-07", "2024-03-01",
"2024-01-01")),
NumClaims = c(
12, 52, 4,
12, 52, 4,
12, 52, 4,
12)
)
rand_norm_perc <- function(n) {
base::set.seed(123)
rand_perc <- stats::runif(n, min = 0, max = 100)
norm_perc <- rand_perc / base::sum(rand_perc)
return(norm_perc)
}
rand_percents <- rand_norm_perc(base::nrow(grantees))
grantees$MaxClaim <- base::round(rand_percents * total_budget, digits = 2)
grantees$AvgClaim <- grantees$MaxClaim / grantees$NumClaims
submission_dates <- function(
start_date,
freq,
num_claims
) {
if (freq == "Weekly") {
return(base::seq(
from = start_date,
by = "7 days",
length.out = num_claims)
)
} else if (freq == "Monthly") {
return(base::seq(
from = start_date,
by = "1 month",
length.out = num_claims)
)
} else if (freq == "Quarterly") {
return(base::seq(
from = start_date,
by = "3 months",
length.out = num_claims)
)
}
}
submission_dates(Sys.Date( ), "Quarterly", 4)
random_status <- function(n) {
statuses <- c("Approved", "Pending Review", "Needs Revision")
return(sample(statuses, n, replace = TRUE))
}
random_issues <- function(n) {
issues <- c("No issues", "Minor discrepancies", "Major discrepancies")
return(sample(issues, n, replace = TRUE))
}
random_status(10)
random_issues(10)
