length.out = num_claims)
)
} else if (freq == "Quarterly") {
return(base::seq(
from = start_date,
by = "3 months",
length.out = num_claims)
)
}
}
# Generate dates based on reporting frequency
submission_dates <- submission_dates(
grantees$StartDate[i],
grantees$ReportingFrequency[i],
grantees$NumClaims[i])
}
# Iterate through grantee_data
for (i in 1:nrow(grantees)) {
# Function
submission_dates <- function(
start_date,
freq,
num_claims
) {
if (freq == "Weekly") {
return(base::seq(
from = start_date,
by = "7 days",
length.out = num_claims)
)
} else if (freq == "Monthly") {
return(base::seq(
from = start_date,
by = "1 month",
length.out = num_claims)
)
} else if (freq == "Quarterly") {
return(base::seq(
from = start_date,
by = "3 months",
length.out = num_claims)
)
}
}
# Generate dates based on reporting frequency
submission_dates <- submission_dates(
grantees$StartDate[i],
grantees$ReportingFrequency[i],
grantees$NumClaims[i])
}
submission_dates
# Generating the submission_dates data frame
submission_dates_df <- do.call(rbind, lapply(1:nrow(grantee_data), function(i) {
data.frame(
GranteeName = grantee_data$GranteeName[i],
SubmissionDate = submission_dates(
start_date = grantee_data$StartDate[i],
freq = grantee_data$ReportingFrequency[i],
num_claims = grantee_data$NumClaims[i]
)
)
}))
# Generating the submission_dates data frame
submission_dates_df <- do.call(rbind, lapply(1:nrow(grantees), function(i) {
data.frame(
GranteeName = grantees$GranteeName[i],
SubmissionDate = submission_dates(
start_date = grantees$StartDate[i],
freq = grantees$ReportingFrequency[i],
num_claims = grantees$NumClaims[i]
)
)
}))
submission_dates <- function(
start_date,
freq,
num_claims
) {
if (freq == "Weekly") {
return(base::seq(
from = start_date,
by = "7 days",
length.out = num_claims)
)
} else if (freq == "Monthly") {
return(base::seq(
from = start_date,
by = "1 month",
length.out = num_claims)
)
} else if (freq == "Quarterly") {
return(base::seq(
from = start_date,
by = "3 months",
length.out = num_claims)
)
}
}
# Generating the submission_dates data frame
submission_dates_df <- do.call(rbind, lapply(1:nrow(grantees), function(i) {
data.frame(
GranteeName = grantees$GranteeName[i],
SubmissionDate = submission_dates(
start_date = grantees$StartDate[i],
freq = grantees$ReportingFrequency[i],
num_claims = grantees$NumClaims[i]
)
)
}))
# Ensure the row numbers are correct (12*4 + 52*3 + 4*3)
nrow(submission_dates_df)
submission_dates_df
# Generating the submission_dates data frame
test1 <- do.call(rbind, lapply(1:nrow(grantees), function(i) {
data.frame(
GranteeName = grantees$GranteeName[i],
SubmissionDate = submission_dates(
start_date = grantees$StartDate[i],
freq = grantees$ReportingFrequency[i],
num_claims = grantees$NumClaims[i]
)
)
}))
# Ensure the row numbers are correct (12*4 + 52*3 + 4*3)
nrow(test1)
test1
?paste()
?lapply()
?do.call()
test1 <- base::do.call(
rbind,
base::lapply(1:nrow(grantees),
function(i) {
data.frame(
GranteeName = grantees$GranteeName[i],
SubmissionDate = submission_dates(
start_date = grantees$StartDate[i],
freq = grantees$ReportingFrequency[i],
num_claims = grantees$NumClaims[i]
)
)
}))
test1
?sample()
test <- base::do.call(
rbind,
base::lapply(1:nrow(grantees),
function(i) {
data.frame(
GranteeName = grantees$GranteeName[i],
SubmissionDate = submission_dates(
start_date = grantees$StartDate[i],
freq = grantees$ReportingFrequency[i],
num_claims = grantees$NumClaims[i]
)
)
}))
test
test$ClaimStatus <- random_status(nrow(test))
test$ClaimIssues <- random_issues(nrow(test))
test
reactable::reactable(
test,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
SubmissionDate = colDef(name = "Submission Date"),
# SubmissionCycle = colDef(name = "Submission Cycle"),
Amount = colDef(
name = "Total Claim Amount",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
ClaimStatus = colDef(
name = "Claim Status",
style = function(value) {
list(background = status_color(value))}),
ClaimIssues = colDef(
name = "Claim Issues",
style = function(value) {
list(background = issue_color(value))}),
Contact = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
grantees$ReportingFrequency
reactable::reactable(
test,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
SubmissionDate = colDef(name = "Submission Date"),
Cycle = colDef(name = "Submission Cycle"),
Amount = colDef(
name = "Total Claim Amount",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
ClaimStatus = colDef(
name = "Claim Status",
style = function(value) {
list(background = status_color(value))}),
ClaimIssues = colDef(
name = "Claim Issues",
style = function(value) {
list(background = issue_color(value))}),
Contact = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
test
test <- base::do.call(
rbind,
base::lapply(1:nrow(grantees),
function(i) {
data.frame(
# Grantee Name
GranteeName = grantees$GranteeName[i],
# Lead Contact
LeadContact = base::paste0(
grantees$GranteeName[i],
" Smith"),
# Grantee Type
GranteeType = grantees$GranteeType[i],
# Submission Dates
SubmissionDate = submission_dates(
start_date = grantees$StartDate[i],
freq = grantees$ReportingFrequency[i],
num_claims = grantees$NumClaims[i]
),
# SubmissionCycle
Cycle = grantees$ReportingFrequency[i],
# Claim Amount
Amount = grantees$AvgClaim[i],
# Contact Information
Contact = base::paste0(
grantees$GranteeName[i],
"@gmail.com")
)
}))
test$ClaimStatus <- random_status(nrow(test))
test$ClaimIssues <- random_issues(nrow(test))
reactable::reactable(
test,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
SubmissionDate = colDef(name = "Submission Date"),
Cycle = colDef(name = "Submission Cycle"),
Amount = colDef(
name = "Total Claim Amount",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
ClaimStatus = colDef(
name = "Claim Status",
style = function(value) {
list(background = status_color(value))}),
ClaimIssues = colDef(
name = "Claim Issues",
style = function(value) {
list(background = issue_color(value))}),
Contact = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
# status colors
status_color <- function(status) {
if (status == "Approved") {
return("green")
} else if (status == "Pending Review") {
return("yellow")
} else if (status == "Needs Revision") {
return("red")
} else {
return("white")
}
}
# issue colors
issue_color <- function(issue) {
if (issue == "No issues") {
return("green")
} else if (issue == "Minor discrepancies") {
return("yellow")
} else if (issue == "Major discrepancies") {
return("red")
} else {
return("white")
}
}
reactable::reactable(
test,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
SubmissionDate = colDef(name = "Submission Date"),
Cycle = colDef(name = "Submission Cycle"),
Amount = colDef(
name = "Total Claim Amount",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
ClaimStatus = colDef(
name = "Claim Status",
style = function(value) {
list(background = status_color(value))}),
ClaimIssues = colDef(
name = "Claim Issues",
style = function(value) {
list(background = issue_color(value))}),
Contact = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
reactable <- reactable::reactable(
test,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
SubmissionDate = colDef(name = "Submission Date"),
Cycle = colDef(name = "Submission Cycle"),
Amount = colDef(
name = "Total Claim Amount",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
ClaimStatus = colDef(
name = "Claim Status",
style = function(value) {
list(background = status_color(value))}),
ClaimIssues = colDef(
name = "Claim Issues",
style = function(value) {
list(background = issue_color(value))}),
Contact = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
test_reactable <- reactable::reactable(
test,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
SubmissionDate = colDef(name = "Submission Date"),
Cycle = colDef(name = "Submission Cycle"),
Amount = colDef(
name = "Total Claim Amount",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
ClaimStatus = colDef(
name = "Claim Status",
style = function(value) {
list(background = status_color(value))}),
ClaimIssues = colDef(
name = "Claim Issues",
style = function(value) {
list(background = issue_color(value))}),
Contact = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
test_reactable
test_reactable <- reactable::reactable(
test,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
SubmissionDate = colDef(name = "Submission Date"),
Cycle = colDef(name = "Submission Cycle"),
Amount = colDef(
name = "Total Claim Amount",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
ClaimStatus = colDef(
name = "Claim Status",
style = function(value) {
list(background = status_color(value))}),
ClaimIssues = colDef(
name = "Claim Issues",
style = function(value) {
list(background = issue_color(value))}),
# Contact = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
test_reactable <- reactable::reactable(
test,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
SubmissionDate = colDef(name = "Submission Date"),
Cycle = colDef(name = "Submission Cycle"),
Amount = colDef(
name = "Total Claim Amount",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
ClaimStatus = colDef(
name = "Claim Status",
style = function(value) {
list(background = status_color(value))}),
ClaimIssues = colDef(
name = "Claim Issues",
style = function(value) {
list(background = issue_color(value))})
# Contact = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
test_reactable
test_reactable <- reactable::reactable(
test,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
SubmissionDate = colDef(name = "Submission Date"),
Cycle = colDef(name = "Submission Cycle"),
Amount = colDef(
name = "Total Claim Amount",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
ClaimStatus = colDef(
name = "Claim Status",
style = function(value) {
list(background = status_color(value))}),
ClaimIssues = colDef(
name = "Claim Issues",
style = function(value) {
list(background = issue_color(value))}),
Contact = colDef(show = F)
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
test_reactable
test_reactable
grantees
grantees
