guides(size = guide_legend(
title.position = "top",
title.hjust = 0.5,
title = "Number of events")
) +
labs(
title = title,
subtitle = st,
caption = cap
) +
theme_minimal(base_size = 12) +
theme(
plot.margin = margin(5, 5, 5, 15),
plot.background = element_rect(fill = bg_col, colour = bg_col),
panel.background = element_rect(fill = bg_col, colour = bg_col),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(
colour = highlight_col,
linewidth = 0.3
),
strip.text = element_text(
family = title_font,
size = rel(1.2)
),
axis.title = element_blank(),
plot.title = element_textbox_simple(
colour = text_col,
size = rel(2),
margin = margin(b = 10, t = 10),
lineheight = 0.5,
family = title_font
),
plot.subtitle = element_textbox_simple(
colour = text_col,
margin = margin(b = 10, t = 0),
lineheight = 0.5
),
plot.caption = element_textbox_simple(
colour = text_col,
margin = margin(b = 10, t = 5),
lineheight = 0.5
),
plot.title.position = "plot",
plot.caption.position = "plot",
legend.position = "bottom",
legend.justification.bottom = "right"
)
# Plot --------------------------------------------------------------------
ggplot(data = plot_data) +
geom_point(
mapping = aes(x = date, y = year, size = n),
colour = highlight_col,
fill = alpha(highlight_col, 0.5),
pch = 21
) +
facet_wrap(~location, ncol = 1) +
scale_y_reverse(breaks = min(plot_data$year):max(plot_data$year)) +
scale_size_area(max_size = 3) +
guides(size = guide_legend(
title.position = "top",
title.hjust = 0.5,
title = "Number of events")
) +
labs(
title = title,
subtitle = st,
caption = cap
) +
theme_minimal(base_size = 12) +
theme(
plot.margin = margin(5, 5, 5, 15),
plot.background = element_rect(fill = bg_col, colour = bg_col),
panel.background = element_rect(fill = bg_col, colour = bg_col),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(
colour = highlight_col,
linewidth = 0.3
),
strip.text = element_text(
family = title_font,
size = rel(1.2)
),
axis.title = element_blank(),
plot.title = element_textbox_simple(
colour = text_col,
size = rel(2),
margin = margin(b = 10, t = 10),
lineheight = 0.5,
family = title_font
),
plot.subtitle = element_textbox_simple(
colour = text_col,
margin = margin(b = 10, t = 0),
lineheight = 0.5
),
plot.caption = element_textbox_simple(
colour = text_col,
margin = margin(b = 10, t = 5),
lineheight = 0.5
),
plot.title.position = "plot",
plot.caption.position = "plot",
legend.position = "bottom",
legend.justification.bottom = "right",
legend.text = element_text(margin = margin(l = 0)),
legend.title = element_text(
margin = margin(t = -10)
)
)
# Load packages -----------------------------------------------------------
library(tidyverse)
library(showtext)
library(ggtext)
# Load data ---------------------------------------------------------------
tuesdata <- tidytuesdayR::tt_load("2023-11-21")
rladies_chapters <- tuesdata$rladies_chapters
# Load fonts --------------------------------------------------------------
font_add_google("Yanone Kaffeesatz", "yanone")
showtext_auto()
# Define colours and fonts-------------------------------------------------
bg_col <- "grey98"
text_col <- "grey5"
highlight_col <- "#562457"
title_font <- "yanone"
# Define text -------------------------------------------------------------
title <- "R-Ladies Chapter Events"
st <- "For both in person and online events, Thursdays are the most common day
of the week to hold R-Ladies chapter events."
cap <- "**Data**: Meetup via Fgazzelloni | **Graphic**: N. Rennie"
# Data wrangling ----------------------------------------------------------
plot_data <- rladies_chapters |>
select(date, location, year) |>
mutate(date = lubridate::wday(date, label = TRUE, week_start = 1)) |>
count(date, location, year) |>
mutate(location = case_when(
location == "inperson" ~ "In person",
location == "online" ~ "Online"
))
# Plot --------------------------------------------------------------------
ggplot(data = plot_data) +
geom_point(
mapping = aes(x = date, y = year, size = n),
colour = highlight_col,
fill = alpha(highlight_col, 0.5),
pch = 21
) +
facet_wrap(~location) +
scale_y_reverse(breaks = min(plot_data$year):max(plot_data$year)) +
labs(
title = title,
subtitle = st,
caption = cap
) +
theme_minimal(base_size = 24) +
theme(
plot.margin = margin(5, 5, 5, 15),
plot.background = element_rect(fill = bg_col, colour = bg_col),
panel.background = element_rect(fill = bg_col, colour = bg_col),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(
colour = highlight_col,
linewidth = 0.3
),
strip.text = element_text(
family = title_font,
size = rel(1.2)
),
axis.title = element_blank(),
plot.title = element_textbox_simple(
colour = text_col,
size = rel(2),
margin = margin(b = 10, t = 10),
lineheight = 0.5,
family = title_font
),
plot.subtitle = element_textbox_simple(
colour = text_col,
margin = margin(b = 10, t = 0),
lineheight = 0.5
),
plot.caption = element_textbox_simple(
colour = text_col,
margin = margin(b = 10, t = 5),
lineheight = 0.5
),
plot.title.position = "plot",
plot.caption.position = "plot"
)
?gg_record()
# Start recording ---------------------------------------------------------
library(camcorder)
gg_record(
dir = "recording",
device = "png",
width = 2,
height = 4,
units = "in",
dpi = 300
)
# Plot --------------------------------------------------------------------
ggplot(data = plot_data) +
geom_point(
mapping = aes(x = date, y = year, size = n),
colour = highlight_col,
fill = alpha(highlight_col, 0.5),
pch = 21
) +
facet_wrap(~location, ncol = 2) +
scale_y_reverse(breaks = min(plot_data$year):max(plot_data$year)) +
scale_size_area(max_size = 3) +
guides(size = guide_legend(
title.position = "top",
title.hjust = 0.5,
title = "Number of events")
) +
labs(
title = title,
subtitle = st,
caption = cap
) +
theme_minimal(base_size = 12) +
theme(
plot.margin = margin(5, 5, 5, 15),
plot.background = element_rect(fill = bg_col, colour = bg_col),
panel.background = element_rect(fill = bg_col, colour = bg_col),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_line(
colour = highlight_col,
linewidth = 0.3
),
strip.text = element_text(
family = title_font,
size = rel(1.2)
),
axis.title = element_blank(),
plot.title = element_textbox_simple(
colour = text_col,
size = rel(2),
margin = margin(b = 10, t = 10),
lineheight = 0.5,
family = title_font
),
plot.subtitle = element_textbox_simple(
colour = text_col,
margin = margin(b = 10, t = 0),
lineheight = 0.5
),
plot.caption = element_textbox_simple(
colour = text_col,
margin = margin(b = 10, t = 5),
lineheight = 0.5
),
plot.title.position = "plot",
plot.caption.position = "plot",
legend.position = "bottom",
legend.justification.bottom = "right"
)
git status
# Load data ---------------------------------------------------------------
tuesdata <- tidytuesdayR::tt_load("2024-07-02")
# Load packages -----------------------------------------------------------
library(tidyverse)
library(showtext)
library(ggtext)
# Load data ---------------------------------------------------------------
tt_datasets <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-02/tt_datasets.csv')
tt_summary <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-02/tt_summary.csv')
tt_urls <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-02/tt_urls.csv')
tt_variables <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-07-02/tt_variables.csv')
# Load fonts --------------------------------------------------------------
font_add_google("Yanone Kaffeesatz", "yanone")
showtext_auto()
# Define colours and fonts-------------------------------------------------
bg_col <- "grey98"
text_col <- "grey5"
highlight_col <- "#562457"
title_font <- "yanone"
# Define text -------------------------------------------------------------
title <- "Tidy Tuesday Observations"
st <- "subtitle goes here.... "
cap <- "**Data**: ttmeta package| **Graphic**: R. Bolt"
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
count(year, observations)
plot_data
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
group_by(year) |>
count(observations)
plot_data
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
group_by(year) |>
mutate(observations = sum(observations))
plot_data
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
group_by(year) |>
mutate(year = year,
observations = sum(observations))
plot_data
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
group_by(year) |>
sum(observations)
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
group_by(year) |>
mutate(year = year,
observations = observations)
plot_data
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
select(year, observations) |>
group_by(year) |>
sum(observations)
plot_data
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
select(year, observations) |>
group_by(year) |>
summarize(total_observations = sum(observations))
plot_data
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
select(year, observations, variables) |>
group_by(year) |>
summarize(total_observations = sum(observations))
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
select(year, observations, variables) |>
group_by(year) |>
summarize(total_observations = sum(observations),
total_variables = sum(variables))
plot_data
# Plot --------------------------------------------------------------------
# Create the line chart for total observations and variables per year
ggplot(plot_data, aes(x = year)) +
geom_line(aes(y = total_observations, color = "Total Observations"), size = 1) +
geom_line(aes(y = total_variables, color = "Total Variables"), size = 1) +
labs(title = "Trend of Observations and Variables per Dataset Over the Years",
x = "Year",
y = "Total Count",
color = "Metric") +
theme_minimal() +
scale_color_manual(values = c("Total Observations" = "blue", "Total Variables" = "red"))
# Plot --------------------------------------------------------------------
ggplot(plot_data, aes(x = year)) +
geom_line(aes(y = total_observations, color = "Total Observations"), size = 1) +
geom_line(aes(y = total_variables * 100000, color = "Total Variables"), size = 1) + # Scale the variables for better visibility
scale_y_continuous(
name = "Total Observations",
sec.axis = sec_axis(~./100000, name = "Total Variables") # Secondary y-axis for variables
) +
labs(title = "Trend of Observations and Variables per Dataset Over the Years",
x = "Year",
color = "Metric") +
theme_minimal() +
scale_color_manual(values = c("Total Observations" = "blue", "Total Variables" = "red"))
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
select(year, observations, variables) |>
group_by(year) |>
summarize(total_observations = scale(sum(observations)),
total_variables = scale(sum(variables)))
# Plot --------------------------------------------------------------------
ggplot(plot_data, aes(x = year)) +
geom_line(aes(y = total_observations, color = "Total Observations"), size = 1) +
geom_line(aes(y = total_variables * 100000, color = "Total Variables"), size = 1) + # Scale the variables for better visibility
scale_y_continuous(
name = "Total Observations",
sec.axis = sec_axis(~./100000, name = "Total Variables") # Secondary y-axis for variables
) +
labs(title = "Trend of Observations and Variables per Dataset Over the Years",
x = "Year",
color = "Metric") +
theme_minimal() +
scale_color_manual(values = c("Total Observations" = "blue", "Total Variables" = "red"))
plot_data
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
select(year, observations, variables) |>
group_by(year) |>
summarize(stand_obs = (sum(observations) - mean(observations))/ sd(sum(observations)),
stand_var = (sum(variables) - mean(variables))/ sd(sum(variables)))
plot_data
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets |>
select(year, observations, variables) |>
group_by(year) |>
mutate(stand_obs = (sum(observations) - mean(observations))/ sd(sum(observations)),
stand_var = (sum(variables) - mean(variables))/ sd(sum(variables)))
plot_data
# Data wrangling ----------------------------------------------------------
plot_data <- tt_datasets %>%
group_by(year) %>%
summarize(
total_observations = sum(observations),
total_variables = sum(variables)
) %>%
mutate(
stand_obs = (total_observations - mean(total_observations)) / sd(total_observations),
stand_var = (total_variables - mean(total_variables)) / sd(total_variables)
)
plot_data
# Plot --------------------------------------------------------------------
# Create the line chart for standardized observations and variables
ggplot(plot_data, aes(x = year)) +
geom_line(aes(y = stand_obs, color = "Standardized Observations"), size = 1) +
geom_line(aes(y = stand_var, color = "Standardized Variables"), size = 1) +
labs(title = "Trend of Standardized Observations and Variables per Dataset Over the Years",
x = "Year",
y = "Standardized Value",
color = "Metric") +
theme_minimal() +
scale_color_manual(values = c("Standardized Observations" = "blue", "Standardized Variables" = "red"))
rooms <- utils::read.csv("data/bedrooms.csv")
?read.csv()
rooms <- utils::read.csv("data/bedrooms.csv")
library(tidyverse)
rooms <- readr::read_csv("data/bedrooms.csv")
library(tidyverse)
rooms <- readr::read_csv("data/bedrooms.csv")
rooms <- utils::read.csv("data/bedrooms.csv")
rooms <- utils::read.csv("data/bedrooms.csv")
rooms <- utils::read.csv("data/bedrooms.csv")
getwd()
rooms <- utils::read.csv("data/bedrooms.csv")
getwd()
rooms
rooms <- utils::read.csv("data/bedrooms.csv",
sep = " ")
rooms
rooms <- utils::read.csv("data/bedrooms.csv",
sep = ",")
rooms
total_rooms <- base::sum(rooms$Total.Units)
total_rooms
total_rooms <- base::sum(rooms$Total.Units)
total_rooms
# Load Data
rooms <- utils::read.csv("data/bedrooms.csv",
sep = ",")
rooms
library(tidyverse)
# Load Data
rooms <- utils::read.csv("data/bedrooms.csv",
sep = ",") |>
mutate(Total.Units = base::as.integer(Total.Units))
total_rooms <- base::sum(rooms$Total.Units)
total_rooms
# Load Data
rooms <- utils::read.csv("data/bedrooms.csv",
sep = ",") |>
mutate(Total.Units = base::as.integer(Total.Units))
rooms
total_rooms <- base::sum(rooms$Total.Units)
total_rooms
base::sum(rooms$Total.Units)
total_rooms
rooms$Total.Units
total_rooms <- rooms |>
filter(!is.na()) |>
mutate(total = base::sum(rooms$Total.Units))
total_rooms
is.na(rooms)
!is.na(rooms)
# Load Data
rooms <- utils::read.csv("data/bedrooms.csv",
sep = ",") |>
filter(Total.Units != "NA") |>
mutate(Total.Units = base::as.integer(Total.Units))
total_rooms <- total = base::sum(rooms$Total.Units)
total_rooms <- base::sum(rooms$Total.Units)
total_rooms
# Load Data
rooms <- utils::read.csv("data/bedrooms.csv",
sep = ",") |>
filter(Total.Units != "NA") |>
mutate(Total.Units = base::as.integer(Total.Units))
total_rooms <- base::sum(rooms$Total.Units)
total_rooms
# Load Data
rooms <- utils::read.csv("data/bedrooms.csv",
sep = ",") |>
filter(Total.Units != "NA") |>
mutate(Total.Units = base::as.integer(Total.Units))
total_rooms <- base::sum(rooms$Total.Units)
total_rooms
rooms
# Load Tidyvers
base::library(tidyverse)
# Load Data
rooms <- utils::read.csv("data/bedrooms.csv",
sep = ",") |>
dplyr::filter(Total.Units != "NA") |>
dplyr::mutate(Total.Units = base::as.integer(Total.Units))
total_rooms <- base::sum(rooms$Total.Units)
total_rooms
# Load Tidyvers
base::library(tidyverse)
# Load Data
rooms <- utils::read.csv("data/bedrooms.csv",
sep = ",") |>
dplyr::filter(Total.Units != "NA") |>
dplyr::mutate(Total.Units = base::as.integer(Total.Units))
total_rooms <- base::sum(rooms$Total.Units)
3732/total_rooms
