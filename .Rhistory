dplyr::mutate(
SubmissionCycle = base::as.factor(SubmissionCycle),
StatusOfClaim = base::as.factor(StatusOfClaim),
IssuesOrQuestions = base::as.factor(IssuesOrQuestions)
)
utils::head(grant_data_fake)
utils::tail(grant_data_fake)
base::library(skimr)
skim_output <- skimr::skim(grant_data_fake)
summary(skim_output)
reactable::reactable(
grant_data_fake,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
DateOfSubmission = colDef(name = "Date of Submission"),
SubmissionCycle = colDef(name = "Submission Cycle"),
TotalAmountOfClaim = colDef(
name = "Total Amount of Claim",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
StatusOfClaim = colDef(
name = "Status of Claim",
style = function(value) {
list(background = status_color(value))}),
IssuesOrQuestions = colDef(
name = "Issues or Questions",
style = function(value) {
list(background = issue_color(value))}),
ContactInformation = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
base::library(reactable)
# status colors
status_color <- function(status) {
if (status == "Approved") {
return("green")
} else if (status == "Pending Review") {
return("yellow")
} else if (status == "Needs Revision") {
return("red")
} else {
return("white")
}
}
# issue colors
issue_color <- function(issue) {
if (issue == "No issues") {
return("green")
} else if (issue == "Minor discrepancies") {
return("yellow")
} else if (issue == "Major discrepancies") {
return("red")
} else {
return("white")
}
}
reactable::reactable(
grant_data_fake,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
DateOfSubmission = colDef(name = "Date of Submission"),
SubmissionCycle = colDef(name = "Submission Cycle"),
TotalAmountOfClaim = colDef(
name = "Total Amount of Claim",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
StatusOfClaim = colDef(
name = "Status of Claim",
style = function(value) {
list(background = status_color(value))}),
IssuesOrQuestions = colDef(
name = "Issues or Questions",
style = function(value) {
list(background = issue_color(value))}),
ContactInformation = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
# status colors
status_color <- function(status) {
if (status == "Approved") {
return("green")
} else if (status == "Pending Review") {
return("yellow")
} else if (status == "Needs Revision") {
return("red")
} else {
return("white")
}
}
# issue colors
issue_color <- function(issue) {
if (issue == "No issues") {
return("green")
} else if (issue == "Minor discrepancies") {
return("yellow")
} else if (issue == "Major discrepancies") {
return("red")
} else {
return("white")
}
}
reactable::reactable(
grant_data_fake,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
DateOfSubmission = colDef(name = "Date of Submission"),
SubmissionCycle = colDef(name = "Submission Cycle"),
TotalAmountOfClaim = colDef(
name = "Total Amount of Claim",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
StatusOfClaim = colDef(
name = "Status of Claim",
style = function(value) {
list(background = status_color(value))}),
IssuesOrQuestions = colDef(
name = "Issues or Questions",
style = function(value) {
list(background = issue_color(value))}),
ContactInformation = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
ballet_plot <- ballet_df %>%
ggplot2::ggplot(mapping = aes(x = date_premiered,
y = Ballet,
color = factor(Acts))) +
ggplot2::geom_point() +
ggplot2::labs(x = "Date Premiered",
y = "Ballet",
color = "Number of Acts") +
ggplot2::ggtitle("Ballets by Date Premiered")
base::library(dplyr)
base::library(lubridate)
base::library(purrr)
base::library(gt)
base::library(ggplot2)
base::library(plotly)
Ballet <- c("Swan Lake",
"The Nutcracker",
"Giselle",
"Romeo and Juliet",
"Don Quixote",
"Cinderella ",
"La Bayadere",
"Coppelia",
"The Sleeping Beauty ",
"La Sylphide ",
"Spartacus",
"Alice's Adventures in Wonder Land",
"Firebird")
Composer <- c("Pyotr Ilyich Tchaikovsky",
"Pyotr Ilyich Tchaikovsky",
"Adolph Adam",
"Sergei Prokofiev",
"Ludwig Minkus",
"Sergei Prokofiev",
"Ludwig Minkus",
"Leo Delibes",
"Pyotr Ilyich Tchaikovsky",
"Filippo Talioni",
"Leonid Yakobson",
"Joby Talbo",
"Igor Stravinsky ")
choreographer_1 <- c("Julius Reisinger",
"Marius Petipa",
"Jean Coralli",
"Ivo Vana-Psota",
"Marius Petipa",
"Rosstislav Zakharov",
"Marius Petipa",
"Arthur Saint-Leon",
"Marius Petipa",
"Jean-Madeline Schnitzhoeffer",
"Aram Khachaturian",
"Christopoher Wheeldon",
"Michel Fokine")
choreographer_2 <- c("",
"Lev Ivanov",
"Jules Perrot",
"",
"",
"",
"",
"",
"",
"",
"",
"",
"")
Acts <- c(4, 2, 2, 4, 3, 3, 4, 2, 3, 2, 3, 3, 1)
month_premiered <- c( 3, 12, 6, 12, 12, 11, 2, 5, 1, 3, 12, 2, 6)
day_premiered <- c( 4, 18, 28, 30, 26, 21, 11, 25, 5, 12, 27, 28, 9)
year_premiered <- c(1877, 1892, 1841, 1938, 1869, 1945, 1877, 1870, 1890, 1832, 1956, 2011, 1910)
Links <- c("https://www.youtube.com/watch?v=LbUatYSm8ME",
"https://www.youtube.com/watch?v=tR_Z1LUDQuQ",
"https://www.youtube.com/watch?v=VroMXEDLTq8",
"https://www.youtube.com/watch?v=7AnpPu7j6Dg",
"https://www.youtube.com/watch?v=pazAS4cNi7w",
"https://www.youtube.com/watch?v=LPbKZXNfJ-Y",
"https://www.youtube.com/watch?v=zTR4Oco_0Bc",
"https://www.youtube.com/watch?v=uE2fjFMag7E",
"https://www.youtube.com/watch?v=EDFlRq5RnbQ",
"https://www.youtube.com/watch?v=R_RFxSLar2A",
"https://www.youtube.com/watch?v=Fha6rYtaLMk",
"https://www.youtube.com/watch?v=c2wWq25p5Sk",
"https://www.youtube.com/watch?v=Yo9L9H--t3k")
ballet_df <- base::data.frame(
Ballet,
Composer,
choreographer_1,
Acts,
date_premiered = lubridate::make_date(year_premiered,
month_premiered,
day_premiered)) %>%
dplyr::arrange(Ballet)
ballet_table <- ballet_df %>%
dplyr::mutate(
Links = map(Links, ~ htmltools::a(href = .x, "Youtube")),
Links = map(Links, ~ gt::html(as.character(.x)))) %>%
gt::gt()
ballet_plot <- ballet_df %>%
ggplot2::ggplot(mapping = aes(x = date_premiered,
y = Ballet,
color = factor(Acts))) +
ggplot2::geom_point() +
ggplot2::labs(x = "Date Premiered",
y = "Ballet",
color = "Number of Acts") +
ggplot2::ggtitle("Ballets by Date Premiered")
ballet_table
ggplotly(ballet_plot)
plotly(ballet_plot)
ggplotly(ballet_plot)
ballet_df %>%
ggplot2::ggplot(mapping = aes(x = date_premiered,
y = Ballet,
color = factor(Acts))) +
ggplot2::geom_point() +
ggplot2::labs(x = "Date Premiered",
y = "Ballet",
color = "Number of Acts") +
ggplot2::ggtitle("Ballets by Date Premiered")
ballet_df %>%
ggplot2::ggplot(mapping = aes(x = date_premiered,
y = Ballet,
color = factor(Acts))) +
ggplot2::geom_point() +
ggplot2::labs(x = "Date Premiered",
y = "Ballet",
color = "Number of Acts") +
ggplot2::ggtitle("Ballets by Date Premiered") %>%
ggplotly()
ballet_df %>%
ggplot2::ggplot(mapping = aes(x = date_premiered,
y = Ballet,
color = factor(Acts))) +
ggplot2::geom_point() +
ggplot2::labs(x = "Date Premiered",
y = "Ballet",
color = "Number of Acts") +
# ggplot2::ggtitle("Ballets by Date Premiered") %>%
ggplotly()
ballet_df %>%
ggplot2::ggplot(mapping = aes(x = date_premiered,
y = Ballet,
color = factor(Acts))) +
ggplot2::geom_point() +
# ggplot2::labs(x = "Date Premiered",
y = "Ballet",
library(data.tree)
# install.packages("DiagrammeR")
library(DiagrammeR)
ex1 <- data.tree::Node$new("Example 1")
library(data.tree)
# install.packages("DiagrammeR")
library(DiagrammeR)
d <- ex1$AddChild("Uses Drug", p = 0.01)
dc <- ex1$AddChild("Does Not Use Drug", p = 0.99)
t <- d$AddChild("Positive Test", p = 0.995)
tc <- d$AddChild("Negative Test", p = 0.005)
t <- dc$AddChild("Positive Test", p = 0.015)
tc<- dc$AddChild("Negative Test", p = 0.985)
base::print(ex1, 'p')
data.tree::SetFormat(ex1, "p", formatFun = data.tree::FormatFixedDecimal(3))
base::print(ex1, 'p')
base::plot(ex1)
data.tree::SetGraphStyle(ex1, rankdir = "LR")
base::plot(ex1)
library(latex2exp)
library(magrittr)
library(dplyr)
library(MASS)
ex31 <- utils::read.csv("data/ex6-1.csv")
ex31
lm1 <- stats::lm(ex31$Delivery_Time_y ~ ex31$Number_of_Cases_x1 + ex31$Distance_x2_.ft., data = ex31)
ex31$hii <- stats::hatvalues(lm1)
ex31
print(influence.measures(lm1))
# load packages
library(rvest)
library(magrittr)
scrape_team_data <- function(slug, year, stats_tb){
"
A function that returns a data frame of team statistics.
@param slug is string of three letters that represents the teams url.
@param year is a string that corresponds to the NBA finals.
@param stats_tb is a string that corresponds to the statistics table on BasketBall Reference such as #per_game, #totals, #per_36_minutes, and #advanced
@return a df of team statistics
"
# define team page URL
url <- base::paste0("https://www.basketball-reference.com/teams/",
slug,"/", year, ".html")
# Read stats table
stats_tb <- url %>%
read_html %>%
html_node(stats_tb) %>%
html_table()
# Rename Column 2 to Name
base::names(stats_tb)[2] <- "Name"
# Replace NA values with 0 (for stat functions)
stats_tb[base::is.na(stats_tb)] <- 0
# make data frame
df <- base::data.frame(stats_tb)
base::return(df)
}
zers_roster <- scrape_team_data("POR","2022","#roster")
utils::head(zers_roster)
library(SportsObserveR)
gsw_totals <- scrape_nba_team_stats("GSW", "2022", "#totals")
utils::head(gsw_totals)
ai <- scrape_nba_player_stats("Allen Iverson", "#per_game")
utils::head(ai, 10)
patients %>%
filter(province_id == "NS") %>%
summarise(unique_cities = unique(city))
library(dplyr)
library(magrittr)
# install.packages("RSQLite")
library(RSQLite)
patients <- utils::read.csv('data/patients.csv')
province_names <- utils::read.csv("data/province_names.csv")
admissions <- utils::read.csv("data/admissions.csv")
hosp <- RSQLite::dbConnect(RSQLite::SQLite(),
"data/Hospital.db")
RSQLite::dbListTables(hosp)
utils::head(patients, 10)
RSQLite::dbGetQuery(hosp,
"SELECT *
FROM patients
LIMIT 10"
)
base::data.frame("total_admissions" = base::nrow(patients))
RSQLite::dbGetQuery(hosp,
"SELECT COUNT(*) AS total_admissions
FROM patients"
)
utils::head(
base::data.frame(
full_name = base::paste0(patients$first_name,
" ",
patients$last_name)),
10)
RSQLite::dbGetQuery(hosp,
"SELECT first_name || ' ' || last_name AS full_name
FROM patients
LIMIT 10"
)
library(dplyr)
library(magrittr)
# install.packages("RSQLite")
library(RSQLite)
patients <- utils::read.csv('data/patients.csv')
province_names <- utils::read.csv("data/province_names.csv")
admissions <- utils::read.csv("data/admissions.csv")
hosp <- RSQLite::dbConnect(RSQLite::SQLite(),
"data/Hospital.db")
RSQLite::dbListTables(hosp)
utils::head(patients, 10)
RSQLite::dbGetQuery(hosp,
"SELECT *
FROM patients
LIMIT 10"
)
base::data.frame("total_admissions" = base::nrow(patients))
RSQLite::dbGetQuery(hosp,
"SELECT COUNT(*) AS total_admissions
FROM patients"
)
utils::head(
base::data.frame(
full_name = base::paste0(patients$first_name,
" ",
patients$last_name)),
10)
RSQLite::dbGetQuery(hosp,
"SELECT first_name || ' ' || last_name AS full_name
FROM patients
LIMIT 10"
)
patients %>%
filter(province_id == "NS") %>%
summarise(unique_cities = unique(city))
dbGetQuery(hosp,
"SELECT DISTINCT(city) AS unique_cities
FROM patients
WHERE province_id IS 'NS'"
)
base::data.frame(
male_count = base::length(base::which(patients$gender == 'M')),
female_count = base::length(base::which(patients$gender == 'F'))
)
dbGetQuery(hosp,
"SELECT
(SELECT COUNT(*) FROM patients WHERE gender = 'M') AS male_count,
(SELECT COUNT(*) FROM patients WHERE gender = 'F') AS female_count")
patients %>%
dplyr::filter(allergies != "NULL") %>%
dplyr::group_by(allergies) %>%
dplyr::summarise(total_diagnosis = dplyr::n()) %>%
dplyr::arrange(dplyr::desc(total_diagnosis)) %>%
utils::head(10)
dbGetQuery(hosp,
"SELECT allergies,
COUNT(*) AS total_diagnosis
FROM patients
WHERE allergies IS NOT 'NULL'
GROUP BY allergies
ORDER BY total_diagnosis DESC
LIMIT 10"
)
base::merge(province_names, patients, by = "province_id") %>%
dplyr::group_by(province_name) %>%
dplyr::summarise(patient_count = dplyr::n()) %>%
dplyr::arrange(dplyr::desc(patient_count))
RSQLite::dbGetQuery(hosp,
"SELECT province_name,
COUNT(*) AS patient_count
FROM patients pa
JOIN province_names pr ON pr.province_id = pa.province_id
GROUP BY pr.province_id
ORDER BY patient_count DESC")
base::merge(province_names, patients, by = "province_id") %>%
dplyr::group_by(province_name) %>%
dplyr::count(gender == "M", gender == "F") %>%
dplyr::slice(base::which.max(n)) %>%
dplyr::summarise(province_name = province_name)
RSQLite::dbGetQuery(hosp,
"SELECT pr.province_name
FROM patients AS pa
JOIN province_names AS pr ON pa.province_id = pr.province_id
GROUP BY pr.province_id
HAVING
COUNT( CASE WHEN gender = 'M' THEN 1 END) >
COUNT( CASE WHEN gender = 'F' THEN 1 END)")
RSQLite::dbGetQuery(hosp,
"SELECT pr.province_name
FROM patients AS pa
JOIN province_names AS pr ON pa.province_id = pr.province_id
GROUP BY pr.province_id
HAVING
COUNT( CASE WHEN gender = 'M' THEN 1 END) >
COUNT( CASE WHEN gender = 'F' THEN 1 END)")
patients %>%
dplyr::filter(base::grepl("^.{2}[b]", first_name),
gender == "F",
weight > 50 & weight < 80,
patient_id %%2==1,
city == "Burlington")
patients %>%
dplyr::mutate(
has_insurance = dplyr::case_when(
patient_id %%2==1 ~ "Yes",
patient_id %%2!=1 ~ "No"
),cost_after_insurance = dplyr::case_when(
has_insurance == "Yes" ~ 10,
has_insurance == "No" ~ 50
)) %>%
group_by(has_insurance)  %>%
summarise(cost_after_insurance = base::sum(cost_after_insurance))
