LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
DateOfSubmission = colDef(name = "Date of Submission"),
SubmissionCycle = colDef(name = "Submission Cycle"),
TotalAmountOfClaim = colDef(
name = "Total Amount of Claim",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
StatusOfClaim = colDef(
name = "Status of Claim",
style = function(value) {
list(background = status_color(value))}),
IssuesOrQuestions = colDef(
name = "Issues or Questions",
style = function(value) {
list(background = issue_color(value))}),
ContactInformation = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5,
groupBy = GranteeName)
),
reactable::reactable(
grant_data_fake,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
DateOfSubmission = colDef(name = "Date of Submission"),
SubmissionCycle = colDef(name = "Submission Cycle"),
TotalAmountOfClaim = colDef(
name = "Total Amount of Claim",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
StatusOfClaim = colDef(
name = "Status of Claim",
style = function(value) {
list(background = status_color(value))}),
IssuesOrQuestions = colDef(
name = "Issues or Questions",
style = function(value) {
list(background = issue_color(value))}),
ContactInformation = colDef(name = "Contact Information")
),
# Define Table Formatting
groupBy = "GranteeName",
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
reactable::reactable(
grant_data_fake,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
DateOfSubmission = colDef(name = "Date of Submission"),
SubmissionCycle = colDef(name = "Submission Cycle"),
TotalAmountOfClaim = colDef(
name = "Total Amount of Claim",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
StatusOfClaim = colDef(
name = "Status of Claim",
style = function(value) {
list(background = status_color(value))}),
IssuesOrQuestions = colDef(
name = "Issues or Questions",
style = function(value) {
list(background = issue_color(value))}),
ContactInformation = colDef(name = "Contact Information")
),
# Define Table Formatting
groupBy = "GranteeName",
bordered = TRUE,
highlight = TRUE)
reactable::reactable(
grant_data_fake,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
DateOfSubmission = colDef(name = "Date of Submission"),
SubmissionCycle = colDef(name = "Submission Cycle"),
TotalAmountOfClaim = colDef(
name = "Total Amount of Claim",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
StatusOfClaim = colDef(
name = "Status of Claim",
style = function(value) {
list(background = status_color(value))}),
IssuesOrQuestions = colDef(
name = "Issues or Questions",
style = function(value) {
list(background = issue_color(value))}),
ContactInformation = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
grantee_data
```
generate_submission_dates <- function(start_date, freq, num_claims) {
if (freq == "Weekly") {
return(base::seq(
from = start_date,
by = "7 days",
length.out = num_claims)
)
} else if (freq == "Monthly") {
return(base::seq(
from = start_date,
by = "1 month",
length.out = num_claims)
)
} else if (freq == "Quarterly") {
return(base::seq(
from = start_date,
by = "3 months",
length.out = num_claims)
)
}
}
# Function to generate random statuses of claim
generate_random_status <- function(n) {
statuses <- c("Approved", "Pending Review", "Needs Revision")
return(sample(statuses, n, replace = TRUE))
}
# Function to generate random issues or questions
generate_random_issues <- function(n) {
issues <- c("No issues", "Minor discrepancies", "Major discrepancies")
return(sample(issues, n, replace = TRUE))
}
# Set Seed to reproduced randomness
base::set.seed(123)
# Iterate through grantee_data
for (i in 1:nrow(grantee_data)) {
# Generate dates based on reporting frequency
submission_dates <- generate_submission_dates(
grantee_data$StartDate[i],
grantee_data$ReportingFrequency[i],
grantee_data$NumClaims[i])
# Repeat columns for each date
fake_data <- data.frame(
GranteeName = rep(
grantee_data$GranteeName[i],
length(submission_dates)
),
LeadContact = rep(
paste("Contact", i),
length(submission_dates)
),
GranteeType = rep(
grantee_data$GranteeType[i],
length(submission_dates)
),
DateOfSubmission = submission_dates,
SubmissionCycle = rep(
grantee_data$ReportingFrequency[i],
length(submission_dates)
),
TotalAmountOfClaim = rep(
sample(seq(
from = 0.5 * grantee_data$AvgClaim[i],
to = grantee_data$AvgClaim[i],
by = 1000),
size = 1),
length(submission_dates)
),
StatusOfClaim = generate_random_status(length(submission_dates)),
IssuesOrQuestions = generate_random_issues(length(submission_dates)),
ContactInformation = rep(
paste("Email:",
paste(sample(0:9, 10, replace = TRUE), collapse = ""),
"@example.com"),
length(submission_dates)
)
)
# Append fake_data to grant_data_fake
grant_data_fake <- bind_rows(grant_data, fake_data)
}
?bind_rows()
?rep()
?paste()
?length()
# Set Seed to reproduced randomness
base::set.seed(123)
# Iterate through grantee_data
for (i in 1:nrow(grantee_data)) {
# Generate dates based on reporting frequency
submission_dates <- generate_submission_dates(
grantee_data$StartDate[i],
grantee_data$ReportingFrequency[i],
grantee_data$NumClaims[i])
# Repeat columns for each date
fake_data <- data.frame(
GranteeName = base::rep(
grantee_data$GranteeName[i],
base::length(submission_dates)
),
LeadContact = base::rep(
base::paste("Contact", i),
base::length(submission_dates)
),
GranteeType = base::rep(
grantee_data$GranteeType[i],
base::length(submission_dates)
),
DateOfSubmission = submission_dates,
SubmissionCycle = base::rep(
grantee_data$ReportingFrequency[i],
base::length(submission_dates)
),
TotalAmountOfClaim = base::rep(
sample(seq(
from = 0.5 * grantee_data$AvgClaim[i],
to = grantee_data$AvgClaim[i],
by = 1000),
size = 1),
base::length(submission_dates)
),
StatusOfClaim = generate_random_status(length(submission_dates)),
IssuesOrQuestions = generate_random_issues(length(submission_dates)),
ContactInformation = base::rep(
base::paste("Email:",
paste::paste(sample(0:9, 10, replace = TRUE), collapse = ""),
"@example.com"),
base::length(submission_dates)
)
)
# Append fake_data to grant_data_fake
grant_data_fake <- dplyr::bind_rows(grant_data, fake_data)
}
?paste()
),
# Set Seed to reproduced randomness
base::set.seed(123)
# Iterate through grantee_data
for (i in 1:nrow(grantee_data)) {
# Generate dates based on reporting frequency
submission_dates <- generate_submission_dates(
grantee_data$StartDate[i],
grantee_data$ReportingFrequency[i],
grantee_data$NumClaims[i])
# Repeat columns for each date
fake_data <- data.frame(
GranteeName = base::rep(
grantee_data$GranteeName[i],
base::length(submission_dates)
),
LeadContact = base::rep(
base::paste("Contact", i),
base::length(submission_dates)
),
GranteeType = base::rep(
grantee_data$GranteeType[i],
base::length(submission_dates)
),
DateOfSubmission = submission_dates,
SubmissionCycle = base::rep(
grantee_data$ReportingFrequency[i],
base::length(submission_dates)
),
TotalAmountOfClaim = base::rep(
sample(seq(
from = 0.5 * grantee_data$AvgClaim[i],
to = grantee_data$AvgClaim[i],
by = 1000),
size = 1),
base::length(submission_dates)
),
StatusOfClaim = generate_random_status(length(submission_dates)),
IssuesOrQuestions = generate_random_issues(length(submission_dates)),
ContactInformation = base::rep(
base::paste("Email:",
base::paste(sample(0:9, 10, replace = TRUE), collapse = ""),
"@example.com"),
base::length(submission_dates)
)
)
# Append fake_data to grant_data_fake
grant_data_fake <- dplyr::bind_rows(grant_data, fake_data)
}
# Set Seed to reproduced randomness
base::set.seed(123)
# Iterate through grantee_data
for (i in 1:nrow(grantee_data)) {
# Generate dates based on reporting frequency
submission_dates <- generate_submission_dates(
grantee_data$StartDate[i],
grantee_data$ReportingFrequency[i],
grantee_data$NumClaims[i])
# Repeat columns for each date
fake_data <- data.frame(
GranteeName = base::rep(
grantee_data$GranteeName[i],
base::length(submission_dates)
),
LeadContact = base::rep(
base::paste("Contact", i),
base::length(submission_dates)
),
GranteeType = base::rep(
grantee_data$GranteeType[i],
base::length(submission_dates)
),
DateOfSubmission = submission_dates,
SubmissionCycle = base::rep(
grantee_data$ReportingFrequency[i],
base::length(submission_dates)
),
TotalAmountOfClaim = base::rep(
sample(seq(
from = 0.5 * grantee_data$AvgClaim[i],
to = grantee_data$AvgClaim[i],
by = 1000),
size = 1),
base::length(submission_dates)
),
StatusOfClaim = generate_random_status(length(submission_dates)),
IssuesOrQuestions = generate_random_issues(length(submission_dates)),
ContactInformation = base::rep(
base::paste("Email:",
base::paste(sample(0:9, 10, replace = TRUE), collapse = ""),
"@example.com"),
base::length(submission_dates)
)
)
# Append fake_data to grant_data_fake
grant_data_fake <- dplyr::bind_rows(grant_data, fake_data)
}
grant_data_fake
grant_data_fake <- grant_data_fake |>
dplyr::mutate(
SubmissionCycle = base::as.factor(SubmissionCycle),
StatusOfClaim = base::as.factor(StatusOfClaim),
IssuesOrQuestions = base::as.factor(IssuesOrQuestions)
)
utils::head(grant_data_fake)
utils::tail(grant_data_fake)
base::library(skimr)
skim_output <- skimr::skim(grant_data_fake)
summary(skim_output)
reactable::reactable(
grant_data_fake,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
DateOfSubmission = colDef(name = "Date of Submission"),
SubmissionCycle = colDef(name = "Submission Cycle"),
TotalAmountOfClaim = colDef(
name = "Total Amount of Claim",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
StatusOfClaim = colDef(
name = "Status of Claim",
style = function(value) {
list(background = status_color(value))}),
IssuesOrQuestions = colDef(
name = "Issues or Questions",
style = function(value) {
list(background = issue_color(value))}),
ContactInformation = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
base::library(reactable)
# status colors
status_color <- function(status) {
if (status == "Approved") {
return("green")
} else if (status == "Pending Review") {
return("yellow")
} else if (status == "Needs Revision") {
return("red")
} else {
return("white")
}
}
# issue colors
issue_color <- function(issue) {
if (issue == "No issues") {
return("green")
} else if (issue == "Minor discrepancies") {
return("yellow")
} else if (issue == "Major discrepancies") {
return("red")
} else {
return("white")
}
}
reactable::reactable(
grant_data_fake,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
DateOfSubmission = colDef(name = "Date of Submission"),
SubmissionCycle = colDef(name = "Submission Cycle"),
TotalAmountOfClaim = colDef(
name = "Total Amount of Claim",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
StatusOfClaim = colDef(
name = "Status of Claim",
style = function(value) {
list(background = status_color(value))}),
IssuesOrQuestions = colDef(
name = "Issues or Questions",
style = function(value) {
list(background = issue_color(value))}),
ContactInformation = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
# status colors
status_color <- function(status) {
if (status == "Approved") {
return("green")
} else if (status == "Pending Review") {
return("yellow")
} else if (status == "Needs Revision") {
return("red")
} else {
return("white")
}
}
# issue colors
issue_color <- function(issue) {
if (issue == "No issues") {
return("green")
} else if (issue == "Minor discrepancies") {
return("yellow")
} else if (issue == "Major discrepancies") {
return("red")
} else {
return("white")
}
}
reactable::reactable(
grant_data_fake,
# Define Column Formatting
columns = list(
GranteeName = colDef(name = "Grantee Name"),
LeadContact = colDef(name = "Lead Contact"),
GranteeType = colDef(name = "Grantee Type"),
DateOfSubmission = colDef(name = "Date of Submission"),
SubmissionCycle = colDef(name = "Submission Cycle"),
TotalAmountOfClaim = colDef(
name = "Total Amount of Claim",
format = colFormat(
currency = "USD",
digits = 2,
separators = TRUE)
),
StatusOfClaim = colDef(
name = "Status of Claim",
style = function(value) {
list(background = status_color(value))}),
IssuesOrQuestions = colDef(
name = "Issues or Questions",
style = function(value) {
list(background = issue_color(value))}),
ContactInformation = colDef(name = "Contact Information")
),
# Define Table Formatting
bordered = TRUE,
highlight = TRUE,
showPageSizeOptions = TRUE,
pageSizeOptions = c(5, 10, 20, 50),
defaultPageSize = 5)
